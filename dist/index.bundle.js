/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var a=n(15),r=n.n(a),o=n(645),i=n.n(o),s=n(667),c=n.n(s),l=n(924),d=n(839),A=n(397),u=n(33),C=i()(r());C.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Heebo:wght@100;200;300;400;500;600;700;800;900&display=swap);"]);var m=c()(l),f=c()(d),h=c()(A),g=c()(u);C.push([t.id,":root {\n\t--color-accent: #4f85cc;\n\t--color-accent-highlight: #62a0f1;\n\t--color-accent-transparent: #4f85cc2f;\n\t--color-super-transparent: #0000000e;\n\t--color-aside: #f1f1f1;\n\t--color-white: #fff;\n\t--color-text: #202020;\n\t--color-dark: #202020;\n\t--color-text-light: #444444b0;\n\t--color-background: #fff;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url("+m+");\n\t--check-filled: url("+f+");\n}\n\n:root.darkmode {\n\t--color-accent: #88b0e6;\n\t--color-accent-highlight: #9fc2f0;\n\t--color-accent-transparent: #88b0e62f;\n\t--color-super-transparent: #ffffff0e;\n\t--color-aside: #2b2b2b;\n\t--color-white: #fff;\n\t--color-text: #e9e9e9;\n\t--color-dark: #202020;\n\t--color-text-light: #cacacac2;\n\t--color-background: #1f1f1f;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url("+h+");\n\t--check-filled: url("+g+');\n}\n\n*,\n*::after,\n*::before {\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n::-webkit-scrollbar {\n\twidth: 0.4rem;\n\theight: 0.4rem;\n}\n\n::-webkit-scrollbar-track {\n\tbackground-color: var(--color-super-transparent);\n}\n\n::-webkit-scrollbar-thumb {\n\tbackground-color: #27272760;\n\tbackground-color: var(--color-accent);\n\tborder-radius: 500vh;\n\ttransition: all 1.15s ease-in;\n\tbackground-clip: padding-box;\n}\n\nbody {\n\tbackground-color: var(--color-background);\n\tcolor: var(--color-text);\n\tfont-family: var(--ff);\n\tdisplay: grid;\n\tgrid-template: auto 1fr/ 1fr;\n\theight: calc(var(--vh) * 100px);\n\toverflow: hidden;\n}\n\nheader {\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tpadding: 0.5rem 1.5rem;\n}\n\n.header-logo {\n\tdisplay: flex;\n\talign-items: baseline;\n\tgap: 0.6rem;\n}\n\n.header-img-container {\n\theight: 20px;\n\twidth: 20px;\n}\n\n.header-text-container {\n\tuser-select: none;\n\tdisplay: flex;\n\talign-items: baseline;\n\tgap: 0.25rem;\n}\n\n.header-text-container h2 {\n\tfont-weight: 400;\n}\n\n.header-text-container h2 + * {\n\topacity: 0;\n\ttransition: opacity 0.5s ease;\n}\n\n.header-logo:hover .header-text-container h2 + * {\n\t/* font-weight: 400; */\n\topacity: 1;\n}\n\n.header-img-container svg path {\n\tfill: var(--color-white);\n\tfill: var(--color-white);\n}\n\nsection {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tposition: relative;\n\tdisplay: grid;\n\tgrid-template: 1fr / 300px 1fr;\n\toverflow: hidden;\n}\n\naside {\n\t/* position: absolute; */\n\theight: 100%;\n\tleft: -100%;\n\tpadding: 1rem 1rem 0.25rem;\n\tbackground-color: var(--color-aside);\n\toverflow: hidden;\n\tdisplay: grid;\n\tgrid-template: 1fr max-content max-content/ 1fr;\n\tgap: 0.5rem;\n\ttransform: all 0.25s ease;\n\toverflow: hidden;\n\tz-index: 2;\n}\n\nsection.reveal {\n\tgrid-template: 1fr / 300px 1fr;\n}\n\nsection.reveal aside {\n\tposition: relative;\n\tleft: 0;\n}\n\n.sidebar-li-container {\n\tdisplay: grid;\n\tflex-direction: column;\n\tgap: 0rem;\n\tuser-select: none;\n\toverflow: hidden;\n}\n\n.sidebar-li-container > * {\n\tdisplay: grid;\n\tgrid-template: 1fr / auto 1fr;\n\tgap: 0 1rem;\n\talign-items: center;\n\tfont-size: 1.2rem;\n\tfont-weight: 400;\n\tpadding: 0.25rem 1rem;\n}\n\n.sidebar-li-container > *:not(:last-child) {\n\tcursor: pointer;\n}\n\n.sidebar-li-container > li:last-of-type {\n\theight: 100%;\n\toverflow-y: hidden;\n\tgrid-template: auto 1fr / auto 1fr;\n}\n\n.sidebar-li-container > li:last-of-type > ul {\n\tgrid-column: 1 / 3;\n\tlist-style: none;\n\tmargin-left: 2.5rem;\n\theight: calc(var(--vh) * 50px);\n\toverflow-y: scroll;\n\talign-self: flex-start;\n}\n\n.sidebar-li-container > li:last-of-type > ul li {\n\tpadding: 0 0 0 0.5rem;\n\tfont-weight: 200;\n\tfont-size: 0.9rem;\n\tcursor: pointer;\n}\n.sidebar-li-container > li:last-of-type > ul li:hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > *:not(:last-child):hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > * svg {\n\tdisplay: block;\n\theight: 18px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.date-icon {\n\tposition: relative;\n}\n\n.date-icon h6 {\n\tposition: absolute;\n\tfont-size: 0.65rem;\n\tfont-weight: 400;\n\ttop: 20%;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tcolor: #1dba23;\n}\n\n.sidebar-footer {\n\theight: max-content;\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.5rem;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.website-button {\n\tbackground-color: var(--color-accent);\n\tpadding: 0.2rem 0.4rem;\n\ttext-decoration: none;\n\twidth: max-content;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\ttransition: background 0.25s ease;\n}\n\n.website-button:hover {\n\ttext-decoration: underline;\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.darkmode-label {\n\twidth: max-content;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\talign-items: center;\n\tcursor: pointer;\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.darkmode-check {\n\tdisplay: none;\n}\n\n.darkmode-switch {\n\tposition: relative;\n\theight: 1rem;\n\twidth: 2rem;\n\tbackground: var(--color-white);\n\tbackground: var(--color-white);\n\tborder-radius: 500vh;\n\tbox-shadow: inset 0 0 0 1px var(--color-grey);\n\toverflow: hidden;\n\ttransition: background 0.4s ease;\n}\n\n.darkmode-switch::after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbackground-color: var(--color-white);\n\tbackground-color: var(--color-white);\n\tborder-radius: 50%;\n\theight: 1rem;\n\twidth: 1rem;\n\tborder: 2px solid var(--color-grey);\n\ttransition: transform 0.2s ease;\n}\n\n.darkmode-check:checked + .darkmode-switch {\n\tbackground-color: var(--color-accent);\n}\n\n.darkmode-check:checked + .darkmode-switch::after {\n\ttransform: translateX(100%);\n}\n\nmain {\n\tpadding: 1rem 7rem 3rem;\n\toverflow: hidden;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n\tz-index: 0;\n}\n\nmain h2 {\n\tfont-weight: 400;\n\tfont-size: 2rem;\n}\n\n.list-container {\n\tlist-style: none;\n\toverflow-y: scroll;\n\t/* background-color: var(--color-grey); */\n}\n\n.list-container > li + li {\n\tborder-top: 1px solid var(--color-accent-transparent);\n}\n\n.list-container li {\n\tpadding: 0.5rem;\n}\n\n.add-button {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tline-height: 1;\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tposition: absolute;\n\tbottom: 2rem;\n\tright: 2rem;\n\tfont-size: 3rem;\n\tfont-weight: 200;\n\theight: 4rem;\n\twidth: 4rem;\n\tborder-radius: 50%;\n\tuser-select: none;\n\tcursor: pointer;\n\ttransition: background 0.25s ease;\n\tz-index: 1;\n}\n\n.add-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.list-container li {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr repeat(4, auto);\n\talign-items: baseline;\n\tgap: 0rem 1rem;\n\tuser-select: none;\n}\n\n.list-container li:hover {\n\tbackground-color: var(--color-super-transparent);\n}\n\n.list-container li .icon {\n\tcursor: pointer;\n\tdisplay: block;\n}\n\n.list-container li .icon:not(.flag-icon) path {\n\tfill: var(--color-text);\n}\n.list-container li .icon:not(.flag-icon) {\n\tvisibility: hidden;\n}\n.list-container li:hover .icon:not(.flag-icon) {\n\tvisibility: visible;\n}\n\n.list-container li .checkbox-container {\n\tbackground: center / cover var(--check-empty);\n\theight: 12px;\n\twidth: 12px;\n\tposition: relative;\n\tcursor: pointer;\n}\n\n.list-container li .checkbox-container:hover {\n\tbox-shadow: 0 0 0 1px var(--color-background),\n\t\t0 0 0 2px var(--color-accent-transparent);\n}\n\n.list-container li.checked-li .checkbox-container {\n\tbackground: center / cover var(--check-filled);\n}\n\n.check-icon {\n\tpointer-events: none;\n\tdisplay: none;\n}\n\n.list-container li h3 {\n\t/* word-wrap: normal; */\n\t/* word-break: ellipsis; */\n\t/* max-width: 300px; */\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.list-container li.expanded h3 {\n\tword-wrap: break-word;\n\tword-break: break-all;\n\ttext-overflow: unset;\n}\n\n.list-container li h3,\n.list-container li p,\n.list-container li h5 {\n\tfont-weight: 300;\n}\n\n.list-container p {\n\t/* max-width: 300px; */\n\ttransition: transform 0.25s ease, height 0s 0.25s;\n\ttransform-origin: top;\n\theight: 0;\n\toverflow: hidden;\n\tword-wrap: break-word;\n\tgrid-column: 2 / 5;\n\ttransform: scaleY(0);\n}\n\n.list-container li.expanded {\n\ttransition: all 0s ease;\n\n\tgap: 1rem;\n}\n\n.list-container li.expanded p {\n\ttransition: transform 0.25s ease;\n\theight: min-content;\n\ttransform: scaleY(1);\n\toverflow: auto;\n}\n\n.list-container li svg {\n\theight: 15px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.list-container li.checked-li > *:not(p) {\n\ttext-decoration: line-through;\n}\n.list-container li.checked-li > * {\n\topacity: 0.5;\n}\n\n.list-container li .flag-icon {\n\tposition: relative;\n}\n.list-container li .flag-icon::after {\n\tcontent: "";\n\theight: 16px;\n\ttop: 1px;\n\tleft: 1px;\n\tposition: absolute;\n\twidth: 2px;\n\tbackground-color: var(--color-text);\n}\n\n.list-container li.high .flag-icon path {\n\tfill: red;\n}\n.list-container li.normal .flag-icon path {\n\tfill: orange;\n}\n.list-container li.low .flag-icon path {\n\tfill: green;\n}\n\n.modal {\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tz-index: 5;\n}\n\n.modal-overlay {\n\tbackground-color: var(--color-dark);\n\topacity: 0.6;\n\theight: 100%;\n\twidth: 100%;\n\tposition: absolute;\n\tz-index: 1;\n}\n\n.modal form {\n\tbackground-color: var(--color-background);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(6, auto) / repeat(2, 1fr);\n\twidth: 300px;\n}\n.add-project-modal form {\n\tbackground-color: var(--color-background);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(2, auto) / repeat(2, 1fr);\n\twidth: 300px;\n}\n\n.modal form *:not(label) {\n\toutline: none;\n\tborder: none;\n\tbackground-color: var(--color-background);\n\tborder-bottom: 1px solid var(--color-accent-transparent);\n}\n\n.modal form *:not(label, button):focus {\n\tborder-bottom: 1px solid var(--color-accent);\n}\n\n.modal form > *:not(.button) {\n\tgrid-column: 1 / 3;\n\tfont-size: 0.8rem;\n\toutline: none;\n\tfont-family: var(--ff);\n\tcolor: var(--color-text);\n}\n\n.modal form label {\n\tdisplay: flex;\n\tgap: 0.5rem;\n}\n\n.modal form input,\n.modal form textarea {\n\tpadding: 0.25rem 0.5rem;\n}\n\n.modal form .cancel-button {\n\tdisplay: inline-block;\n\t/* width: max-content; */\n\tbackground-color: transparent;\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-text);\n}\n\n.modal form .button {\n\ttext-align: center;\n\tpadding: 0.25rem 0.5rem;\n\tfont-size: 0.9rem;\n}\n\n.modal form .save-button {\n\tbackground-color: var(--color-accent);\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-background);\n\tborder-radius: 0;\n\tfont-family: var(--ff);\n}\n\n.modal form .cancel-button:hover {\n\tbackground-color: var(--color-super-transparent);\n\ttext-decoration: underline;\n}\n.modal form .save-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n\ttext-decoration: underline;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Heebo:wght@100;200;300;400;500;600;700;800;900&display=swap");\n\n:root {\n\t--color-accent: #4f85cc;\n\t--color-accent-highlight: #62a0f1;\n\t--color-accent-transparent: #4f85cc2f;\n\t--color-super-transparent: #0000000e;\n\t--color-aside: #f1f1f1;\n\t--color-white: #fff;\n\t--color-text: #202020;\n\t--color-dark: #202020;\n\t--color-text-light: #444444b0;\n\t--color-background: #fff;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url(./check-empty.svg);\n\t--check-filled: url(./check-filled.svg);\n}\n\n:root.darkmode {\n\t--color-accent: #88b0e6;\n\t--color-accent-highlight: #9fc2f0;\n\t--color-accent-transparent: #88b0e62f;\n\t--color-super-transparent: #ffffff0e;\n\t--color-aside: #2b2b2b;\n\t--color-white: #fff;\n\t--color-text: #e9e9e9;\n\t--color-dark: #202020;\n\t--color-text-light: #cacacac2;\n\t--color-background: #1f1f1f;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url(./check-empty-dark.svg);\n\t--check-filled: url(./check-filled-dark.svg);\n}\n\n*,\n*::after,\n*::before {\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n::-webkit-scrollbar {\n\twidth: 0.4rem;\n\theight: 0.4rem;\n}\n\n::-webkit-scrollbar-track {\n\tbackground-color: var(--color-super-transparent);\n}\n\n::-webkit-scrollbar-thumb {\n\tbackground-color: #27272760;\n\tbackground-color: var(--color-accent);\n\tborder-radius: 500vh;\n\ttransition: all 1.15s ease-in;\n\tbackground-clip: padding-box;\n}\n\nbody {\n\tbackground-color: var(--color-background);\n\tcolor: var(--color-text);\n\tfont-family: var(--ff);\n\tdisplay: grid;\n\tgrid-template: auto 1fr/ 1fr;\n\theight: calc(var(--vh) * 100px);\n\toverflow: hidden;\n}\n\nheader {\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tpadding: 0.5rem 1.5rem;\n}\n\n.header-logo {\n\tdisplay: flex;\n\talign-items: baseline;\n\tgap: 0.6rem;\n}\n\n.header-img-container {\n\theight: 20px;\n\twidth: 20px;\n}\n\n.header-text-container {\n\tuser-select: none;\n\tdisplay: flex;\n\talign-items: baseline;\n\tgap: 0.25rem;\n}\n\n.header-text-container h2 {\n\tfont-weight: 400;\n}\n\n.header-text-container h2 + * {\n\topacity: 0;\n\ttransition: opacity 0.5s ease;\n}\n\n.header-logo:hover .header-text-container h2 + * {\n\t/* font-weight: 400; */\n\topacity: 1;\n}\n\n.header-img-container svg path {\n\tfill: var(--color-white);\n\tfill: var(--color-white);\n}\n\nsection {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tposition: relative;\n\tdisplay: grid;\n\tgrid-template: 1fr / 300px 1fr;\n\toverflow: hidden;\n}\n\naside {\n\t/* position: absolute; */\n\theight: 100%;\n\tleft: -100%;\n\tpadding: 1rem 1rem 0.25rem;\n\tbackground-color: var(--color-aside);\n\toverflow: hidden;\n\tdisplay: grid;\n\tgrid-template: 1fr max-content max-content/ 1fr;\n\tgap: 0.5rem;\n\ttransform: all 0.25s ease;\n\toverflow: hidden;\n\tz-index: 2;\n}\n\nsection.reveal {\n\tgrid-template: 1fr / 300px 1fr;\n}\n\nsection.reveal aside {\n\tposition: relative;\n\tleft: 0;\n}\n\n.sidebar-li-container {\n\tdisplay: grid;\n\tflex-direction: column;\n\tgap: 0rem;\n\tuser-select: none;\n\toverflow: hidden;\n}\n\n.sidebar-li-container > * {\n\tdisplay: grid;\n\tgrid-template: 1fr / auto 1fr;\n\tgap: 0 1rem;\n\talign-items: center;\n\tfont-size: 1.2rem;\n\tfont-weight: 400;\n\tpadding: 0.25rem 1rem;\n}\n\n.sidebar-li-container > *:not(:last-child) {\n\tcursor: pointer;\n}\n\n.sidebar-li-container > li:last-of-type {\n\theight: 100%;\n\toverflow-y: hidden;\n\tgrid-template: auto 1fr / auto 1fr;\n}\n\n.sidebar-li-container > li:last-of-type > ul {\n\tgrid-column: 1 / 3;\n\tlist-style: none;\n\tmargin-left: 2.5rem;\n\theight: calc(var(--vh) * 50px);\n\toverflow-y: scroll;\n\talign-self: flex-start;\n}\n\n.sidebar-li-container > li:last-of-type > ul li {\n\tpadding: 0 0 0 0.5rem;\n\tfont-weight: 200;\n\tfont-size: 0.9rem;\n\tcursor: pointer;\n}\n.sidebar-li-container > li:last-of-type > ul li:hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > *:not(:last-child):hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > * svg {\n\tdisplay: block;\n\theight: 18px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.date-icon {\n\tposition: relative;\n}\n\n.date-icon h6 {\n\tposition: absolute;\n\tfont-size: 0.65rem;\n\tfont-weight: 400;\n\ttop: 20%;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tcolor: #1dba23;\n}\n\n.sidebar-footer {\n\theight: max-content;\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.5rem;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.website-button {\n\tbackground-color: var(--color-accent);\n\tpadding: 0.2rem 0.4rem;\n\ttext-decoration: none;\n\twidth: max-content;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\ttransition: background 0.25s ease;\n}\n\n.website-button:hover {\n\ttext-decoration: underline;\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.darkmode-label {\n\twidth: max-content;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\talign-items: center;\n\tcursor: pointer;\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.darkmode-check {\n\tdisplay: none;\n}\n\n.darkmode-switch {\n\tposition: relative;\n\theight: 1rem;\n\twidth: 2rem;\n\tbackground: var(--color-white);\n\tbackground: var(--color-white);\n\tborder-radius: 500vh;\n\tbox-shadow: inset 0 0 0 1px var(--color-grey);\n\toverflow: hidden;\n\ttransition: background 0.4s ease;\n}\n\n.darkmode-switch::after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbackground-color: var(--color-white);\n\tbackground-color: var(--color-white);\n\tborder-radius: 50%;\n\theight: 1rem;\n\twidth: 1rem;\n\tborder: 2px solid var(--color-grey);\n\ttransition: transform 0.2s ease;\n}\n\n.darkmode-check:checked + .darkmode-switch {\n\tbackground-color: var(--color-accent);\n}\n\n.darkmode-check:checked + .darkmode-switch::after {\n\ttransform: translateX(100%);\n}\n\nmain {\n\tpadding: 1rem 7rem 3rem;\n\toverflow: hidden;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n\tz-index: 0;\n}\n\nmain h2 {\n\tfont-weight: 400;\n\tfont-size: 2rem;\n}\n\n.list-container {\n\tlist-style: none;\n\toverflow-y: scroll;\n\t/* background-color: var(--color-grey); */\n}\n\n.list-container > li + li {\n\tborder-top: 1px solid var(--color-accent-transparent);\n}\n\n.list-container li {\n\tpadding: 0.5rem;\n}\n\n.add-button {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tline-height: 1;\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tposition: absolute;\n\tbottom: 2rem;\n\tright: 2rem;\n\tfont-size: 3rem;\n\tfont-weight: 200;\n\theight: 4rem;\n\twidth: 4rem;\n\tborder-radius: 50%;\n\tuser-select: none;\n\tcursor: pointer;\n\ttransition: background 0.25s ease;\n\tz-index: 1;\n}\n\n.add-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.list-container li {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr repeat(4, auto);\n\talign-items: baseline;\n\tgap: 0rem 1rem;\n\tuser-select: none;\n}\n\n.list-container li:hover {\n\tbackground-color: var(--color-super-transparent);\n}\n\n.list-container li .icon {\n\tcursor: pointer;\n\tdisplay: block;\n}\n\n.list-container li .icon:not(.flag-icon) path {\n\tfill: var(--color-text);\n}\n.list-container li .icon:not(.flag-icon) {\n\tvisibility: hidden;\n}\n.list-container li:hover .icon:not(.flag-icon) {\n\tvisibility: visible;\n}\n\n.list-container li .checkbox-container {\n\tbackground: center / cover var(--check-empty);\n\theight: 12px;\n\twidth: 12px;\n\tposition: relative;\n\tcursor: pointer;\n}\n\n.list-container li .checkbox-container:hover {\n\tbox-shadow: 0 0 0 1px var(--color-background),\n\t\t0 0 0 2px var(--color-accent-transparent);\n}\n\n.list-container li.checked-li .checkbox-container {\n\tbackground: center / cover var(--check-filled);\n}\n\n.check-icon {\n\tpointer-events: none;\n\tdisplay: none;\n}\n\n.list-container li h3 {\n\t/* word-wrap: normal; */\n\t/* word-break: ellipsis; */\n\t/* max-width: 300px; */\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.list-container li.expanded h3 {\n\tword-wrap: break-word;\n\tword-break: break-all;\n\ttext-overflow: unset;\n}\n\n.list-container li h3,\n.list-container li p,\n.list-container li h5 {\n\tfont-weight: 300;\n}\n\n.list-container p {\n\t/* max-width: 300px; */\n\ttransition: transform 0.25s ease, height 0s 0.25s;\n\ttransform-origin: top;\n\theight: 0;\n\toverflow: hidden;\n\tword-wrap: break-word;\n\tgrid-column: 2 / 5;\n\ttransform: scaleY(0);\n}\n\n.list-container li.expanded {\n\ttransition: all 0s ease;\n\n\tgap: 1rem;\n}\n\n.list-container li.expanded p {\n\ttransition: transform 0.25s ease;\n\theight: min-content;\n\ttransform: scaleY(1);\n\toverflow: auto;\n}\n\n.list-container li svg {\n\theight: 15px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.list-container li.checked-li > *:not(p) {\n\ttext-decoration: line-through;\n}\n.list-container li.checked-li > * {\n\topacity: 0.5;\n}\n\n.list-container li .flag-icon {\n\tposition: relative;\n}\n.list-container li .flag-icon::after {\n\tcontent: "";\n\theight: 16px;\n\ttop: 1px;\n\tleft: 1px;\n\tposition: absolute;\n\twidth: 2px;\n\tbackground-color: var(--color-text);\n}\n\n.list-container li.high .flag-icon path {\n\tfill: red;\n}\n.list-container li.normal .flag-icon path {\n\tfill: orange;\n}\n.list-container li.low .flag-icon path {\n\tfill: green;\n}\n\n.modal {\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tz-index: 5;\n}\n\n.modal-overlay {\n\tbackground-color: var(--color-dark);\n\topacity: 0.6;\n\theight: 100%;\n\twidth: 100%;\n\tposition: absolute;\n\tz-index: 1;\n}\n\n.modal form {\n\tbackground-color: var(--color-background);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(6, auto) / repeat(2, 1fr);\n\twidth: 300px;\n}\n.add-project-modal form {\n\tbackground-color: var(--color-background);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(2, auto) / repeat(2, 1fr);\n\twidth: 300px;\n}\n\n.modal form *:not(label) {\n\toutline: none;\n\tborder: none;\n\tbackground-color: var(--color-background);\n\tborder-bottom: 1px solid var(--color-accent-transparent);\n}\n\n.modal form *:not(label, button):focus {\n\tborder-bottom: 1px solid var(--color-accent);\n}\n\n.modal form > *:not(.button) {\n\tgrid-column: 1 / 3;\n\tfont-size: 0.8rem;\n\toutline: none;\n\tfont-family: var(--ff);\n\tcolor: var(--color-text);\n}\n\n.modal form label {\n\tdisplay: flex;\n\tgap: 0.5rem;\n}\n\n.modal form input,\n.modal form textarea {\n\tpadding: 0.25rem 0.5rem;\n}\n\n.modal form .cancel-button {\n\tdisplay: inline-block;\n\t/* width: max-content; */\n\tbackground-color: transparent;\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-text);\n}\n\n.modal form .button {\n\ttext-align: center;\n\tpadding: 0.25rem 0.5rem;\n\tfont-size: 0.9rem;\n}\n\n.modal form .save-button {\n\tbackground-color: var(--color-accent);\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-background);\n\tborder-radius: 0;\n\tfont-family: var(--ff);\n}\n\n.modal form .cancel-button:hover {\n\tbackground-color: var(--color-super-transparent);\n\ttext-decoration: underline;\n}\n.modal form .save-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n\ttext-decoration: underline;\n}\n'],sourceRoot:""}]);const p=C},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,a){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(a)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);a&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,a=new Array(e);n<e;n++)a[n]=t[n];return a}t.exports=function(t){var n,a,r=(a=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var a,r,o=[],i=!0,s=!1;try{for(n=n.call(t);!(i=(a=n.next()).done)&&(o.push(a.value),!e||o.length!==e);i=!0);}catch(t){s=!0,r=t}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return o}}(n,a)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var a=Object.prototype.toString.call(t).slice(8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?Array.from(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?e(t,n):void 0}}(n,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],i=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),d=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[o].concat(d).concat([l]).join("\n")}return[o].join("\n")}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},695:t=>{"use strict";var e={};t.exports=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,a=0;a<e.length;a++)if(e[a].identifier===t){n=a;break}return n}function a(t,a){for(var o={},i=[],s=0;s<t.length;s++){var c=t[s],l=a.base?c[0]+a.base:c[0],d=o[l]||0,A="".concat(l," ").concat(d);o[l]=d+1;var u=n(A),C={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(e[u].references++,e[u].updater(C)):e.push({identifier:A,updater:r(C,a),references:1}),i.push(A)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=a(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=n(o[i]);e[s].references--}for(var c=a(t,r),l=0;l<o.length;l++){var d=n(o[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=c}}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},380:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var a=n.css,r=n.media,o=n.sourceMap;r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},582:(t,e,n)=>{var a;!function(r,o){"use strict";var i="file:"===r.location.protocol,s=o.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1"),c=Array.prototype.forEach||function(t,e){if(null==this||"function"!=typeof t)throw new TypeError;var n,a=this.length>>>0;for(n=0;n<a;++n)n in this&&t.call(e,this[n],n,this)},l={},d=0,A=[],u=[],C={},m=function(t){return t.cloneNode(!0)},f=function(t,e){u[t]=u[t]||[],u[t].push(e)},h=function(t,e,n,a){var o=t.getAttribute("data-src")||t.getAttribute("src");if(/\.svg/i.test(o))if(s)-1===A.indexOf(t)&&(A.push(t),t.setAttribute("src",""),function(t,e){if(void 0!==l[t])l[t]instanceof SVGSVGElement?e(m(l[t])):f(t,e);else{if(!r.XMLHttpRequest)return e("Browser does not support XMLHttpRequest"),!1;l[t]={},f(t,e);var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){if(404===n.status||null===n.responseXML)return e("Unable to load SVG file: "+t),i&&e("Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver."),e(),!1;if(!(200===n.status||i&&0===n.status))return e("There was a problem injecting the SVG: "+n.status+" "+n.statusText),!1;if(n.responseXML instanceof Document)l[t]=n.responseXML.documentElement;else if(DOMParser&&DOMParser instanceof Function){var a;try{a=(new DOMParser).parseFromString(n.responseText,"text/xml")}catch(t){a=void 0}if(!a||a.getElementsByTagName("parsererror").length)return e("Unable to parse SVG file: "+t),!1;l[t]=a.documentElement}!function(t){for(var e=0,n=u[t].length;e<n;e++)!function(e){setTimeout((function(){u[t][e](m(l[t]))}),0)}(e)}(t)}},n.open("GET",t),n.overrideMimeType&&n.overrideMimeType("text/xml"),n.send()}}(o,(function(n){if(void 0===n||"string"==typeof n)return a(n),!1;var i=t.getAttribute("id");i&&n.setAttribute("id",i);var s=t.getAttribute("title");s&&n.setAttribute("title",s);var l=[].concat(n.getAttribute("class")||[],"injected-svg",t.getAttribute("class")||[]).join(" ");n.setAttribute("class",function(t){for(var e={},n=(t=t.split(" ")).length,a=[];n--;)e.hasOwnProperty(t[n])||(e[t[n]]=1,a.unshift(t[n]));return a.join(" ")}(l));var u=t.getAttribute("style");u&&n.setAttribute("style",u);var m=[].filter.call(t.attributes,(function(t){return/^data-\w[\w\-]*$/.test(t.name)}));c.call(m,(function(t){t.name&&t.value&&n.setAttribute(t.name,t.value)}));var f,h,g,p,v,b={clipPath:["clip-path"],"color-profile":["color-profile"],cursor:["cursor"],filter:["filter"],linearGradient:["fill","stroke"],marker:["marker","marker-start","marker-mid","marker-end"],mask:["mask"],pattern:["fill","stroke"],radialGradient:["fill","stroke"]};Object.keys(b).forEach((function(t){f=t,g=b[t];for(var e=0,a=(h=n.querySelectorAll("defs "+f+"[id]")).length;e<a;e++){var r;p=h[e].id,v=p+"-"+d,c.call(g,(function(t){for(var e=0,a=(r=n.querySelectorAll("["+t+'*="'+p+'"]')).length;e<a;e++)r[e].setAttribute(t,"url(#"+v+")")})),h[e].id=v}})),n.removeAttribute("xmlns:a");for(var B,w,y=n.querySelectorAll("script"),x=[],k=0,E=y.length;k<E;k++)(w=y[k].getAttribute("type"))&&"application/ecmascript"!==w&&"application/javascript"!==w||(B=y[k].innerText||y[k].textContent,x.push(B),n.removeChild(y[k]));if(x.length>0&&("always"===e||"once"===e&&!C[o])){for(var T=0,L=x.length;T<L;T++)new Function(x[T])(r);C[o]=!0}var D=n.querySelectorAll("style");c.call(D,(function(t){t.textContent+=""})),t.parentNode.replaceChild(n,t),delete A[A.indexOf(t)],t=null,d++,a(n)})));else{var h=t.getAttribute("data-fallback")||t.getAttribute("data-png");h?(t.setAttribute("src",h),a(null)):n?(t.setAttribute("src",n+"/"+o.split("/").pop().replace(".svg",".png")),a(null)):a("This browser does not support SVG and no PNG fallback was defined.")}else a("Attempted to inject a file with a non-svg extension: "+o)},g=function(t,e,n){var a=(e=e||{}).evalScripts||"always",r=e.pngFallback||!1,o=e.each;if(void 0!==t.length){var i=0;c.call(t,(function(e){h(e,a,r,(function(e){o&&"function"==typeof o&&o(e),n&&t.length===++i&&n(i)}))}))}else t?h(t,a,r,(function(e){o&&"function"==typeof o&&o(e),n&&n(1),t=null})):n&&n(0)};"object"==typeof t.exports?t.exports=e=g:void 0===(a=function(){return g}.call(e,n,e,t))||(t.exports=a)}(window,document)},397:(t,e,n)=>{"use strict";t.exports=n.p+"0347aa3ad7e10815c1d8.svg"},924:(t,e,n)=>{"use strict";t.exports=n.p+"8919e66b4570e33b8b93.svg"},33:(t,e,n)=>{"use strict";t.exports=n.p+"0b2b514fa93c01a14653.svg"},839:(t,e,n)=>{"use strict";t.exports=n.p+"9cef2a5df753bef9310d.svg"},31:(t,e,n)=>{"use strict";t.exports=n.p+"156c9cc0902a7b8b9950.svg"},795:(t,e,n)=>{"use strict";t.exports=n.p+"96ee3277aeab380f280a.svg"},849:(t,e,n)=>{"use strict";t.exports=n.p+"d3d59b1b655516e6d0f7.svg"},541:(t,e,n)=>{"use strict";t.exports=n.p+"3a702c8e6bc17214fef2.svg"},464:(t,e,n)=>{"use strict";t.exports=n.p+"0ed7142e57e319840dff.svg"},240:(t,e,n)=>{"use strict";t.exports=n.p+"f965f1f542b97f1df123.svg"},423:(t,e,n)=>{"use strict";t.exports=n.p+"cda5dccb48bd41faa621.svg"}},e={};function n(a){var r=e[a];if(void 0!==r)return r.exports;var o=e[a]={id:a,exports:{}};return t[a](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var a in e)n.o(e,a)&&!n.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var a=e.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{"use strict";var t=n(464),e=n(849),a=n(795),r=n(31),o=n(541),i=n(423),s=n(240),c=n(379),l=n.n(c),d=n(380),A=n.n(d),u=n(695),C=n.n(u),m=n(216),f=n.n(m),h=n(426),g={styleTagTransform:function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}},setAttributes:function(t){var e=n.nc;e&&t.setAttribute("nonce",e)},insert:function(t){var e=C()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}};g.domAPI=A(),g.insertStyleElement=f(),l()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var p=n(582),v=n.n(p);const b=function(){let t=[],e=["Dash","Cash","Crash"];function n(...e){const n=function(t,e,n,a,r,o){return{title:t,description:e,dueDate:n,priority:a,isDone:r,category:o}}(...e);t.unshift(n)}return n("passss","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",3,!1,null),n("basssss","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",2,!0,null),n("cashhhh","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",3,!1,null),n("dashhhh","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",1,!0,"Dash"),n("passss","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",3,!0,null),n("basssss","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",2,!0,null),n("cashhhh","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",3,!1,null),n("dashhhh","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-07-08",1,!0,null),n("passss","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",3,!0,null),n("basssss","asdasdaqdadasdadzxcaxcsdasdasqdasdsaqdadasdasdasdadasdadasdasdasdasdasdadadadasdadaadsasdasasdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","2021-09-14",2,!1,null),{getNotesList:function(){return[...t]},setNotes:n,removeNote:function(e){t.splice(e,1)},getProjectList:function(){return[...e]},setProject:function(t){e.push(t)},removeProject:function(t){e.splice(t,1)},editSingleNoteProperty:function(e,n,a){t[e][n]=a}}}();function B(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function w(t){B(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(t){B(1,arguments);var e=w(t);return!isNaN(e)}var x={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function k(t){return function(e){var n=e||{},a=n.width?String(n.width):t.defaultWidth;return t.formats[a]||t.formats[t.defaultWidth]}}var E,T={date:k({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:k({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:k({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function D(t){return function(e,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=r.width?String(r.width):o;a=t.formattingValues[i]||t.formattingValues[o]}else{var s=t.defaultWidth,c=r.width?String(r.width):t.defaultWidth;a=t.values[c]||t.values[s]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function q(t){return function(e,n){var a=String(e),r=n||{},o=r.width,i=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],s=a.match(i);if(!s)return null;var c,l=s[0],d=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(l))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(l))return n}(d),c=t.valueCallback?t.valueCallback(c):c,{value:c=r.valueCallback?r.valueCallback(c):c,rest:a.slice(l.length)}}}const S={code:"en-US",formatDistance:function(t,e,n){var a;return n=n||{},a="string"==typeof x[t]?x[t]:1===e?x[t].one:x[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:T,formatRelative:function(t,e,n,a){return L[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:D({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:D({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:D({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:D({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:D({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(E={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),a=e||{},r=n.match(E.matchPattern);if(!r)return null;var o=r[0],i=n.match(E.parsePattern);if(!i)return null;var s=E.valueCallback?E.valueCallback(i[0]):i[0];return{value:s=a.valueCallback?a.valueCallback(s):s,rest:n.slice(o.length)}}),era:q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function P(t,e){B(2,arguments);var n=w(t).getTime(),a=M(e);return new Date(n+a)}function N(t,e){B(2,arguments);var n=M(e);return P(t,-n)}function Y(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const U=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return Y("yy"===e?a%100:a,e.length)},j=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):Y(n+1,2)},z=function(t,e){return Y(t.getUTCDate(),e.length)},W=function(t,e){return Y(t.getUTCHours()%12||12,e.length)},O=function(t,e){return Y(t.getUTCHours(),e.length)},X=function(t,e){return Y(t.getUTCMinutes(),e.length)},H=function(t,e){return Y(t.getUTCSeconds(),e.length)},F=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return Y(Math.floor(a*Math.pow(10,n-3)),e.length)};var Z=864e5;function G(t){B(1,arguments);var e=1,n=w(t),a=n.getUTCDay(),r=(a<e?7:0)+a-e;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function R(t){B(1,arguments);var e=w(t),n=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=G(a),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=G(o);return e.getTime()>=r.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function I(t){B(1,arguments);var e=R(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var a=G(n);return a}var Q=6048e5;function V(t,e){B(1,arguments);var n=e||{},a=n.locale,r=a&&a.options&&a.options.weekStartsOn,o=null==r?0:M(r),i=null==n.weekStartsOn?o:M(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=w(t),c=s.getUTCDay(),l=(c<i?7:0)+c-i;return s.setUTCDate(s.getUTCDate()-l),s.setUTCHours(0,0,0,0),s}function $(t,e){B(1,arguments);var n=w(t,e),a=n.getUTCFullYear(),r=e||{},o=r.locale,i=o&&o.options&&o.options.firstWeekContainsDate,s=null==i?1:M(i),c=null==r.firstWeekContainsDate?s:M(r.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(a+1,0,c),l.setUTCHours(0,0,0,0);var d=V(l,e),A=new Date(0);A.setUTCFullYear(a,0,c),A.setUTCHours(0,0,0,0);var u=V(A,e);return n.getTime()>=d.getTime()?a+1:n.getTime()>=u.getTime()?a:a-1}function _(t,e){B(1,arguments);var n=e||{},a=n.locale,r=a&&a.options&&a.options.firstWeekContainsDate,o=null==r?1:M(r),i=null==n.firstWeekContainsDate?o:M(n.firstWeekContainsDate),s=$(t,e),c=new Date(0);c.setUTCFullYear(s,0,i),c.setUTCHours(0,0,0,0);var l=V(c,e);return l}var J=6048e5;function K(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),o=a%60;if(0===o)return n+String(r);var i=e||"";return n+String(r)+i+Y(o,2)}function tt(t,e){return t%60==0?(t>0?"-":"+")+Y(Math.abs(t)/60,2):et(t,e)}function et(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+Y(Math.floor(r/60),2)+n+Y(r%60,2)}const nt={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});case"GGGG":default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return U(t,e)},Y:function(t,e,n,a){var r=$(t,a),o=r>0?r:1-r;return"YY"===e?Y(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):Y(o,e.length)},R:function(t,e){return Y(R(t),e.length)},u:function(t,e){return Y(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return Y(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return Y(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return j(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return Y(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){var r=function(t,e){B(1,arguments);var n=w(t),a=V(n,e).getTime()-_(n,e).getTime();return Math.round(a/J)+1}(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):Y(r,e.length)},I:function(t,e,n){var a=function(t){B(1,arguments);var e=w(t),n=G(e).getTime()-I(e).getTime();return Math.round(n/Q)+1}(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):Y(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):z(t,e)},D:function(t,e,n){var a=function(t){B(1,arguments);var e=w(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=e.getTime(),r=n-a;return Math.floor(r/Z)+1}(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):Y(a,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});case"EEEE":default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return Y(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});case"eeee":default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return Y(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});case"cccc":default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return Y(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});case"iiii":default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return W(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):O(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):Y(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):Y(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):X(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):H(t,e)},S:function(t,e){return F(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return tt(r);case"XXXX":case"XX":return et(r);case"XXXXX":case"XXX":default:return et(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return tt(r);case"xxxx":case"xx":return et(r);case"xxxxx":case"xxx":default:return et(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+K(r,":");case"OOOO":default:return"GMT"+et(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+K(r,":");case"zzzz":default:return"GMT"+et(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return Y(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return Y((a._originalDate||t).getTime(),e.length)}};function at(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function rt(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const ot={p:rt,P:function(t,e){var n,a=t.match(/(P+)(p+)?/),r=a[1],o=a[2];if(!o)return at(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;case"PPPP":default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",at(r,e)).replace("{{time}}",rt(o,e))}};function it(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var st=["D","DD"],ct=["YY","YYYY"];function lt(t){return-1!==st.indexOf(t)}function dt(t){return-1!==ct.indexOf(t)}function At(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ut=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ct=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,mt=/^'([^]*?)'?$/,ft=/''/g,ht=/[a-zA-Z]/;function gt(t,e,n){B(2,arguments);var a=String(e),r=n||{},o=r.locale||S,i=o.options&&o.options.firstWeekContainsDate,s=null==i?1:M(i),c=null==r.firstWeekContainsDate?s:M(r.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=o.options&&o.options.weekStartsOn,d=null==l?0:M(l),A=null==r.weekStartsOn?d:M(r.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var u=w(t);if(!y(u))throw new RangeError("Invalid time value");var C=it(u),m=N(u,C),f={firstWeekContainsDate:c,weekStartsOn:A,locale:o,_originalDate:u},h=a.match(Ct).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ot[e])(t,o.formatLong,f):t})).join("").match(ut).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return pt(n);var i=nt[a];if(i)return!r.useAdditionalWeekYearTokens&&dt(n)&&At(n,e,t),!r.useAdditionalDayOfYearTokens&&lt(n)&&At(n,e,t),i(m,n,o.localize,f);if(a.match(ht))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("");return h}function pt(t){return t.match(mt)[1].replace(ft,"'")}var vt=36e5,bt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Bt=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,wt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,yt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function xt(t,e){B(1,arguments);var n=e||{},a=null==n.additionalDigits?2:M(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var r,o=kt(t);if(o.date){var i=Et(o.date,a);r=Tt(i.restDateString,i.year)}if(isNaN(r)||!r)return new Date(NaN);var s,c=r.getTime(),l=0;if(o.time&&(l=Dt(o.time),isNaN(l)||null===l))return new Date(NaN);if(!o.timezone){var d=new Date(c+l),A=new Date(0);return A.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),A.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),A}return s=St(o.timezone),isNaN(s)?new Date(NaN):new Date(c+l+s)}function kt(t){var e,n={},a=t.split(bt.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?(n.date=null,e=a[0]):(n.date=a[0],e=a[1],bt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(bt.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var r=bt.timezone.exec(e);r?(n.time=e.replace(r[1],""),n.timezone=r[1]):n.time=e}return n}function Et(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:null};var r=a[1]&&parseInt(a[1]),o=a[2]&&parseInt(a[2]);return{year:null==o?r:100*o,restDateString:t.slice((a[1]||a[2]).length)}}function Tt(t,e){if(null===e)return null;var n=t.match(Bt);if(!n)return null;var a=!!n[4],r=Lt(n[1]),o=Lt(n[2])-1,i=Lt(n[3]),s=Lt(n[4]),c=Lt(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,c)?function(t,e,n){var a=new Date(0);a.setUTCFullYear(t,0,4);var r=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+r),a}(e,s,c):new Date(NaN);var l=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(Mt[e]||(Pt(t)?29:28))}(e,o,i)&&function(t,e){return e>=1&&e<=(Pt(t)?366:365)}(e,r)?(l.setUTCFullYear(e,o,Math.max(r,i)),l):new Date(NaN)}function Lt(t){return t?parseInt(t):1}function Dt(t){var e=t.match(wt);if(!e)return null;var n=qt(e[1]),a=qt(e[2]),r=qt(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,a,r)?n*vt+6e4*a+1e3*r:NaN}function qt(t){return t&&parseFloat(t.replace(",","."))||0}function St(t){if("Z"===t)return 0;var e=t.match(yt);if(!e)return 0;var n="+"===e[1]?-1:1,a=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,r)?n*(a*vt+6e4*r):NaN}var Mt=[31,null,31,30,31,30,31,31,30,31,30,31];function Pt(t){return t%400==0||t%4==0&&t%100}!function(){let t=window.innerHeight/100;document.documentElement.style.setProperty("--vh",t),window.addEventListener("resize",(()=>{t=window.innerHeight/100,document.documentElement.style.setProperty("--vh",t)}))}(),function(){function n(){!function(){const t=document.createElement("div"),e=document.createElement("div"),n=document.createElement("form"),a=document.createElement("input"),r=document.createElement("button"),o=document.createElement("div");a.setAttribute("placeholder","Project Name"),a.required=!0,r.textContent="Save",o.textContent="Cancel",e.classList.add("modal-overlay"),t.classList.add("modal"),t.classList.add("add-project-modal"),o.classList.add("button"),r.classList.add("button"),r.classList.add("save-button"),o.classList.add("cancel-button"),console.log(b.getProjectList()),r.addEventListener("click",(e=>{a.value&&(console.log(a.value),b.setProject(a.value),console.log(b.getProjectList()),t.remove(),document.querySelectorAll(".project-list li").forEach((t=>t.remove())),c(document.querySelector(".project-list")),e.preventDefault())})),o.addEventListener("click",(e=>{t.remove(),e.preventDefault()})),n.append(a,o,r),t.append(e,n),document.body.append(t),a.focus()}()}function c(t){const e=document.createElement("li");e.classList.add(".add-new-project"),e.addEventListener("click",n),e.textContent="+ Add new project",t.append(e);for(let e=0;e<b.getProjectList().length;e++){const n=document.createElement("li");console.log,n.innerText=b.getProjectList()[e],n.addEventListener("click",A),t.append(n)}}function l(t){t.target.checked?document.documentElement.classList.add("darkmode"):document.documentElement.classList.remove("darkmode")}function d(){!function(){const t=["Low Priority","Normal Priority","High Priority"],e=document.createElement("div"),n=document.createElement("div"),a=document.createElement("form"),r=document.createElement("input"),o=document.createElement("textarea"),i=document.createElement("label"),s=document.createElement("select"),c=document.createElement("label"),l=document.createElement("select"),d=document.createElement("input"),A=document.createElement("button"),u=document.createElement("div");r.setAttribute("placeholder","Title"),r.required=!0,o.required=!0,d.required=!0,o.setAttribute("placeholder","Description..."),o.setAttribute("rows","4"),d.setAttribute("type","date"),A.textContent="Save",u.textContent="Cancel",i.textContent="Set Priority:",c.textContent="Set Category:";for(let e=0;e<3;e++){const n=document.createElement("option");n.value=e+1,n.textContent=t[e],e+1===2&&n.setAttribute("selected","selected"),s.append(n)}for(let t=0;t<b.getProjectList().length;t++){const e=document.createElement("option");e.value=b.getProjectList()[t],e.textContent=b.getProjectList()[t]?b.getProjectList()[t]:"Default",l.append(e)}n.classList.add("modal-overlay"),e.classList.add("modal"),A.classList.add("save-button"),A.classList.add("button"),u.classList.add("cancel-button"),u.classList.add("button"),i.append(s),c.append(l),A.addEventListener("click",(t=>{r.value&&o.value&&d.value&&(b.setNotes(r.value,o.value,d.value,+s.value,!1,"null"===l?null:l.value),e.remove(),C(),m(document.querySelector(".list-container")),t.preventDefault())})),u.addEventListener("click",(t=>{e.remove(),t.preventDefault()})),a.append(r,o,d,i,c,u,A),e.append(n,a),document.body.append(e),r.focus()}()}function A(t){const e=document.querySelector(".list-container");C(),m(e,t.target.innerText),document.querySelector(".page-head").textContent=t.target.innerText}function u(t){const e=t.target,n=e.parentElement.dataset.index;switch(e.classList[0]){case"flag-icon":t.stopPropagation(),e.parentElement.classList.contains("high")?(b.editSingleNoteProperty(n,"priority",1),e.parentElement.classList.remove("high"),e.parentElement.classList.add("low")):e.parentElement.classList.contains("normal")?(b.editSingleNoteProperty(n,"priority",3),e.parentElement.classList.remove("normal"),e.parentElement.classList.add("high")):(e.parentElement.classList.remove("low"),b.editSingleNoteProperty(n,"priority",2),e.parentElement.classList.add("normal"));break;case"edit-icon":t.stopPropagation(),function(t){const e=["Low Priority","Normal Priority","High Priority"],n=document.createElement("div"),a=document.createElement("div"),r=document.createElement("form"),o=document.createElement("input"),i=document.createElement("textarea"),s=document.createElement("label"),c=document.createElement("select"),l=document.createElement("label"),d=document.createElement("select"),A=document.createElement("input"),u=document.createElement("button"),f=document.createElement("div");o.required=!0,i.required=!0,A.required=!0,o.setAttribute("placeholder","Title"),i.setAttribute("placeholder","Description..."),i.setAttribute("rows","4"),A.setAttribute("type","date"),u.textContent="Save",f.textContent="Cancel",s.textContent="Set Priority:",l.textContent="Set Category:",o.value=b.getNotesList()[t].title,i.value=b.getNotesList()[t].description,A.defaultValue=b.getNotesList()[t].dueDate;for(let n=0;n<3;n++){const a=document.createElement("option");a.value=n+1,a.textContent=e[n],b.getNotesList()[t].priority===n+1&&a.setAttribute("selected","selected"),c.append(a)}for(let e=0;e<b.getProjectList().length;e++){const n=document.createElement("option");n.value=b.getProjectList()[e],n.textContent=b.getProjectList()[e]?b.getProjectList()[e]:"Default",b.getNotesList()[t].category?b.getNotesList()[t].category===n.value&&n.setAttribute("selected","selected"):"null"===n.value&&n.setAttribute("selected","selected"),d.append(n)}a.classList.add("modal-overlay"),n.classList.add("modal"),u.classList.add("save-button"),f.classList.add("cancel-button"),f.classList.add("button"),u.classList.add("button"),s.append(c),l.append(d),u.addEventListener("click",(e=>{o.value&&i.value&&A.value&&(b.editSingleNoteProperty(t,"title",o.value),b.editSingleNoteProperty(t,"description",i.value),b.editSingleNoteProperty(t,"dueDate",A.value),b.editSingleNoteProperty(t,"priority",+c.value),b.editSingleNoteProperty(t,"category","null"===d.value?null:d.value),n.remove(),C(),m(document.querySelector(".list-container")),e.preventDefault())})),f.addEventListener("click",(t=>{n.remove(),t.preventDefault()})),r.append(o,i,A,s,l,f,u),n.append(a,r),document.body.append(n),o.focus()}(n);break;case"delete-icon":b.removeNote(n),C(),m(document.querySelector(".list-container")),t.stopPropagation();break;case"checkbox-container":t.stopPropagation();break;case"check-icon":e.checked?(e.parentElement.parentElement.classList.add("checked-li"),b.editSingleNoteProperty(e.parentElement.parentElement.dataset.index,"isDone",!0)):(e.parentElement.parentElement.classList.remove("checked-li"),b.editSingleNoteProperty(e.parentElement.parentElement.dataset.index,"isDone",!1)),t.stopPropagation();break;case"note-li":e.classList.toggle("expanded");break;default:e.parentElement.classList.toggle("expanded")}}function C(){document.querySelectorAll(".list-container li").forEach((t=>{t.remove()}))}function m(t,n="Today"){let o;o=n?"Today"===n?b.getNotesList().filter((t=>gt(xt(t.dueDate),"dd/MM/yyyy")===gt(new Date,"dd/MM/yyyy"))):b.getNotesList().filter((t=>t.category===n)):b.getNotesList().filter((t=>null===t.category));for(let n=0;n<o.length;n++){const o=document.createElement("li"),i=document.createElement("input"),s=document.createElement("label"),c=document.createElement("h3"),l=document.createElement("p"),d=document.createElement("h5"),A=document.createElement("div"),C=document.createElement("div"),m=document.createElement("div"),h=new Image,g=new Image,p=new Image;switch(h.src=e,g.src=a,p.src=r,i.setAttribute("type","checkbox"),o.dataset.index=n,c.textContent=b.getNotesList()[n].title,i.checked=b.getNotesList()[n].isDone,l.textContent=b.getNotesList()[n].description,d.textContent=gt(xt(b.getNotesList()[n].dueDate),"dd/MM/yyyy"),A.classList.add("flag-icon","icon"),C.classList.add("edit-icon","icon"),m.classList.add("delete-icon","icon"),h.classList.add("svg-icon"),g.classList.add("svg-icon"),p.classList.add("svg-icon"),o.classList.add("note-li"),i.classList.add("check-icon"),s.classList.add("checkbox-container"),b.getNotesList()[n].isDone&&o.classList.add("checked-li"),b.getNotesList()[n].priority){case 1:o.classList.add("low");break;case 2:o.classList.add("normal");break;case 3:o.classList.add("high")}A.append(h),C.append(g),m.append(p),o.addEventListener("click",u),s.append(i),o.append(s,c,d,A,C,m,l),t.append(o),f()}}function f(){const t=document.querySelectorAll("img.svg-icon");v()(t)}document.body.append(function(){const e=document.createElement("header"),n=document.createElement("div"),a=document.createElement("div"),r=document.createElement("div"),o=document.createElement("h2"),i=document.createElement("p"),s=new Image;return o.classList.add("big-h-text"),i.classList.add("small-h-text"),a.classList.add("header-logo"),r.classList.add("header-img-container"),n.classList.add("header-text-container"),s.classList.add("svg-icon"),s.src=t,o.textContent="To-do",i.textContent="or not to do...",r.append(s),n.append(o,i),a.append(r,n),e.append(a),e}(),function(){const t=document.createElement("section");return t.append(function(){const t=document.createElement("div");return t.textContent="+",t.classList.add("add-button"),t.addEventListener("click",d),t}(),function(){const t=document.createElement("aside"),e=document.createElement("div"),n=document.createElement("div"),a=document.createElement("a");e.append(function(){const t=document.createElement("ul"),e=document.createElement("li"),n=document.createElement("li"),a=document.createElement("li"),r=document.createElement("ul"),l=document.createElement("div"),d=new Image;d.src=o;const A=new Image;A.src=i;const u=new Image;u.src=s;const C=document.createElement("h6");return C.innerHTML=(new Date).toLocaleDateString().slice(0,2),r.classList.add("project-list"),d.classList.add("svg-icon"),A.classList.add("svg-icon"),u.classList.add("svg-icon"),l.classList.add("date-icon"),c(r),e.append(d,"Home"),a.append(u,"Projects",r),l.append(A,C),n.append(l,"Today"),t.classList.add("sidebar-li-container"),t.append(e,n,a),t}());const r=document.createElement("label"),d=document.createElement("input"),A=document.createElement("div");return a.textContent="berserkwal",n.textContent="Designed and developed by",a.classList.add("website-button"),e.classList.add("sidebar-stuff"),n.classList.add("sidebar-footer"),r.classList.add("darkmode-label"),d.classList.add("darkmode-check"),A.classList.add("darkmode-switch"),a.setAttribute("href","https://berserkwal.github.io"),a.setAttribute("target","_blank"),d.setAttribute("type","checkbox"),r.append("Dark Mode",d,A),n.append(a),t.append(e,r,n),d.addEventListener("click",l),t}(),function(){const t=document.createElement("main"),e=document.createElement("h2"),n=document.createElement("ul");return e.textContent="Home",n.classList.add("list-container"),e.classList.add("page-head"),t.append(e,n),m(n),t}()),t}()),f()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
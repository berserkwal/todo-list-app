/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var r=n(15),o=n.n(r),a=n(645),i=n.n(a),c=n(667),l=n.n(c),s=n(924),d=n(839),A=n(397),u=n(33),C=i()(o());C.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Heebo:wght@100;200;300;400;500;600;700;800;900&display=swap);"]);var m=l()(s),g=l()(d),f=l()(A),h=l()(u);C.push([t.id,":root {\n\t--color-accent: #4f85cc;\n\t--color-accent-highlight: #62a0f1;\n\t--color-accent-transparent: #4f85cc2f;\n\t--color-super-transparent: #0000000e;\n\t--color-aside: #f1f1f1;\n\t--color-white: #fff;\n\t--color-text: #202020;\n\t--color-dark: #202020;\n\t--color-overlay: #20202069;\n\t--color-text-light: #444444b0;\n\t--color-background: #fff;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url("+m+");\n\t--check-filled: url("+g+");\n}\n\n:root.darkmode {\n\t--color-accent: #88b0e6;\n\t--color-accent-highlight: #9fc2f0;\n\t--color-accent-transparent: #88b0e62f;\n\t--color-super-transparent: #ffffff0e;\n\t--color-aside: #2b2b2b;\n\t--color-white: #fff;\n\t--color-text: #e9e9e9;\n\t--color-overlay: #cccccc69;\n\t--color-dark: #202020;\n\t--color-text-light: #cacacac2;\n\t--color-background: #1f1f1f;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url("+f+");\n\t--check-filled: url("+h+');\n}\n\n*,\n*::after,\n*::before {\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n::-webkit-scrollbar {\n\twidth: 0.4rem;\n\theight: 0.4rem;\n}\n\n::-webkit-scrollbar-track {\n\tbackground-color: var(--color-super-transparent);\n}\n\n::-webkit-scrollbar-thumb {\n\tbackground-color: #27272760;\n\tbackground-color: var(--color-accent);\n\tborder-radius: 500vh;\n\ttransition: all 1.15s ease-in;\n\tbackground-clip: padding-box;\n}\n\nbody {\n\tbackground-color: var(--color-background);\n\tcolor: var(--color-text);\n\tfont-family: var(--ff);\n\tdisplay: grid;\n\tgrid-template: auto 1fr/ 1fr;\n\theight: calc(var(--vh) * 100px);\n\toverflow: hidden;\n}\n\nheader {\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tpadding: 0.5rem 1.5rem;\n}\n\n.header-logo {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.6rem;\n}\n\n.header-img-container {\n\theight: 23px;\n\twidth: 23px;\n}\n\n.header-text-container {\n\tuser-select: none;\n\tdisplay: flex;\n\talign-items: baseline;\n\tgap: 0.25rem;\n\tline-height: 1;\n}\n\n.header-text-container h2 {\n\tfont-weight: 400;\n}\n\n.header-text-container h2 + * {\n\topacity: 0;\n\ttransition: opacity 0.5s ease;\n}\n\n.header-logo:hover .header-text-container h2 + * {\n\t/* font-weight: 400; */\n\topacity: 1;\n}\n\n.header-img-container svg path {\n\tfill: var(--color-white);\n\tfill: var(--color-white);\n}\n\nsection {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tposition: relative;\n\tdisplay: grid;\n\tgrid-template: 1fr / 300px 1fr;\n\toverflow: hidden;\n}\n\naside {\n\t/* position: absolute; */\n\theight: 100%;\n\tpadding: 1rem 1rem 0.25rem;\n\tbackground-color: var(--color-aside);\n\toverflow: hidden;\n\tdisplay: grid;\n\tgrid-template: 1fr max-content max-content/ 1fr;\n\tgap: 0.5rem;\n\toverflow: hidden;\n\tz-index: 2;\n}\n/* \nsection.reveal {\n\tgrid-template: 1fr / 300px 1fr;\n}\n\nsection.reveal aside {\n\tposition: relative;\n\tleft: 0;\n} */\n\n.sidebar-li-container {\n\tdisplay: grid;\n\tflex-direction: column;\n\tgap: 0rem;\n\tuser-select: none;\n\toverflow: hidden;\n}\n\n.sidebar-li-container > * {\n\tdisplay: grid;\n\tgrid-template: 1fr / auto 1fr;\n\tgap: 0 1rem;\n\talign-items: center;\n\tfont-size: 1.2rem;\n\tfont-weight: 400;\n\tpadding: 0.25rem 1rem;\n}\n\n.sidebar-li-container > *:not(:last-child) {\n\tcursor: pointer;\n}\n\n.sidebar-li-container > li:last-of-type {\n\theight: 100%;\n\toverflow-y: hidden;\n\tgrid-template: auto 1fr / auto 1fr;\n}\n\n.sidebar-li-container > li:last-of-type > ul {\n\tgrid-column: 1 / 3;\n\tlist-style: none;\n\tmargin-left: 2.5rem;\n\tmax-height: calc(var(--vh) * 50px);\n\toverflow-y: auto;\n\toverflow-x: hidden;\n\talign-self: flex-start;\n}\n\n.sidebar-li-container > li:last-of-type > ul li {\n\tpadding: 0 0.5rem;\n\tfont-weight: 200;\n\tfont-size: 0.9rem;\n\tcursor: pointer;\n\tdisplay: grid;\n\talign-items: center;\n\tgap: 0.25rem;\n\tgrid-template-columns: auto 1fr;\n}\n.sidebar-li-container > li:last-of-type > ul li:not(*:first-child) {\n\tgrid-template-columns: 1fr auto;\n}\n.sidebar-li-container > li:last-of-type ul li svg path {\n\tfill: var(--color-text);\n}\n.sidebar-li-container > li:last-of-type ul li:hover > svg path {\n\tfill: var(--color-accent);\n}\n\n.sidebar-li-container > li:last-of-type ul li div:hover path {\n\tfill: red;\n}\n.sidebar-li-container > li:last-of-type > ul li svg {\n\theight: 13px;\n\tuser-select: none;\n\topacity: 0.5;\n}\n.sidebar-li-container > li:last-of-type > ul li:hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > *:not(:last-child):hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > * svg {\n\tdisplay: block;\n\theight: 18px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.date-icon {\n\tposition: relative;\n}\n\n.date-icon h6 {\n\tposition: absolute;\n\tfont-size: 0.65rem;\n\tfont-weight: 400;\n\ttop: 20%;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tcolor: #1dba23;\n}\n\n.sidebar-footer {\n\theight: max-content;\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.5rem;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.website-button {\n\tbackground-color: var(--color-accent);\n\tpadding: 0.2rem 0.4rem;\n\ttext-decoration: none;\n\twidth: max-content;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\ttransition: background 0.25s ease;\n}\n\n.website-button:hover {\n\ttext-decoration: underline;\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.darkmode-label {\n\twidth: max-content;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\talign-items: center;\n\tcursor: pointer;\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.darkmode-check {\n\tdisplay: none;\n}\n\n.darkmode-switch {\n\tposition: relative;\n\theight: 1rem;\n\twidth: 2rem;\n\tbackground: var(--color-white);\n\tbackground: var(--color-white);\n\tborder-radius: 500vh;\n\tbox-shadow: inset 0 0 0 1px var(--color-grey);\n\toverflow: hidden;\n\ttransition: background 0.4s ease;\n}\n\n.darkmode-switch::after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbackground-color: var(--color-white);\n\tbackground-color: var(--color-white);\n\tborder-radius: 50%;\n\theight: 1rem;\n\twidth: 1rem;\n\tborder: 2px solid var(--color-grey);\n\ttransition: transform 0.2s ease;\n}\n\n.darkmode-check:checked + .darkmode-switch {\n\tbackground-color: var(--color-accent);\n}\n\n.darkmode-check:checked + .darkmode-switch::after {\n\ttransform: translateX(100%);\n}\n\nmain {\n\tpadding: 1rem 7rem 3rem;\n\toverflow: hidden;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n\tz-index: 0;\n}\n\nmain h2 {\n\tfont-weight: 400;\n\tfont-size: 2rem;\n}\n\n.list-container {\n\tdisplay: grid;\n\tlist-style: none;\n\toverflow-y: auto;\n\t/* background-color: var(--color-grey); */\n}\n\n.list-container > li + li {\n\tborder-top: 1px solid var(--color-accent-transparent);\n}\n\n.list-container li {\n\tpadding: 0.5rem;\n}\n\n.add-button {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tline-height: 1;\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tposition: absolute;\n\tbottom: 2rem;\n\tright: 2rem;\n\tfont-size: 3rem;\n\tfont-weight: 200;\n\theight: 4rem;\n\twidth: 4rem;\n\tborder-radius: 50%;\n\tuser-select: none;\n\tcursor: pointer;\n\ttransition: background 0.25s ease;\n\tz-index: 1;\n}\n\n.add-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.list-container .note-li {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr repeat(4, auto);\n\talign-items: baseline;\n\tgap: 0rem 1rem;\n\tuser-select: none;\n}\n\n.list-container li:hover {\n\tbackground-color: var(--color-super-transparent);\n}\n\n.list-container li .icon {\n\tcursor: pointer;\n\tdisplay: block;\n}\n\n.list-container li .icon:not(.flag-icon) path {\n\tfill: var(--color-text);\n}\n.list-container li .icon:not(.flag-icon) {\n\tvisibility: hidden;\n}\n.list-container li:hover .icon:not(.flag-icon) {\n\tvisibility: visible;\n}\n\n.list-container li .checkbox-container {\n\tbackground: center / cover var(--check-empty);\n\theight: 12px;\n\twidth: 12px;\n\tposition: relative;\n\tcursor: pointer;\n}\n\n.list-container li .checkbox-container:hover {\n\tbox-shadow: 0 0 0 1px var(--color-background),\n\t\t0 0 0 2px var(--color-accent-transparent);\n}\n\n.list-container li.checked-li .checkbox-container {\n\tbackground: center / cover var(--check-filled);\n}\n\n.check-icon {\n\tpointer-events: none;\n\tdisplay: none;\n}\n\n.list-container li h3 {\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.list-container li.expanded h3 {\n\tword-wrap: break-word;\n\tword-break: break-all;\n\ttext-overflow: unset;\n}\n\n.list-container li h3,\n.list-container li p,\n.list-container li h5 {\n\tfont-weight: 300;\n}\n\n.list-container .note-li p {\n\t/* max-width: 300px; */\n\ttransition: transform 0.25s ease, height 0s 0.25s;\n\ttransform-origin: top;\n\theight: 0;\n\toverflow: hidden;\n\tword-wrap: break-word;\n\tgrid-column: 2 / 5;\n\ttransform: scaleY(0);\n}\n\n.message-li {\n\tfont-size: 1.3rem;\n\tfont-weight: 600;\n\tdisplay: grid;\n\ttext-align: center;\n\talign-self: center;\n\tjustify-self: center;\n\tcolor: var(--color-text);\n\topacity: 0.4;\n\tuser-select: none;\n}\n.list-container .message-li:hover {\n\tbackground-color: transparent;\n}\n\n.message-li p {\n\tfont-size: 0.9rem;\n}\n\n.list-container li.expanded {\n\ttransition: all 0s ease;\n\tbackground-color: var(--color-super-transparent);\n\n\tgap: 1rem;\n}\n\n.list-container li.expanded p {\n\ttransition: transform 0.25s ease;\n\theight: min-content;\n\ttransform: scaleY(1);\n\toverflow: auto;\n}\n\n.list-container li svg {\n\theight: 15px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.list-container li.checked-li > h3 {\n\ttext-decoration: line-through;\n}\n.list-container li.checked-li > * {\n\topacity: 0.5;\n}\n\n.list-container li .flag-icon {\n\tposition: relative;\n}\n.list-container li .flag-icon::after {\n\tcontent: "";\n\theight: 16px;\n\ttop: 1px;\n\tleft: 1px;\n\tposition: absolute;\n\twidth: 2px;\n\tbackground-color: var(--color-text);\n}\n\n.list-container li.high .flag-icon path {\n\tfill: red;\n}\n.list-container li.normal .flag-icon path {\n\tfill: orange;\n}\n.list-container li.low .flag-icon path {\n\tfill: green;\n}\n\n.modal {\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tz-index: 5;\n}\n\n.modal-overlay {\n\tbackground-color: var(--color-overlay);\n\t/* opacity: 0.6; */\n\theight: 100%;\n\twidth: 100%;\n\tposition: absolute;\n\tz-index: 1;\n}\n\n.modal form {\n\tbackground-color: var(--color-background);\n\tborder: 1px solid var(--color-super-transparent);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(6, auto) / repeat(2, 1fr);\n\twidth: 300px;\n\tcolor: var(--color-text);\n}\n.add-project-modal form {\n\tbackground-color: var(--color-background);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(2, auto) / repeat(2, 1fr);\n\twidth: 300px;\n}\n\n.modal form *:not(label) {\n\toutline: none;\n\tborder: none;\n\tbackground-color: transparent;\n\tborder-bottom: 1px solid var(--color-accent-transparent);\n\tcolor: var(--color-text);\n}\n\n.modal form *:not(label, button):focus {\n\tborder-bottom: 1px solid var(--color-accent);\n\tcolor: var(--color-text);\n}\n\n.modal form > *:not(.button) {\n\tgrid-column: 1 / 3;\n\tfont-size: 0.8rem;\n\toutline: none;\n\tfont-family: var(--ff);\n}\n\n.modal form > label {\n\tcolor: var(--color-text);\n\tdisplay: flex;\n\tgap: 0.5rem;\n}\n\n.modal form input,\n.modal form textarea {\n\tpadding: 0.25rem 0.5rem;\n}\n\n.modal form .cancel-button {\n\tdisplay: inline-block;\n\t/* width: max-content; */\n\tbackground-color: transparent;\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-text);\n}\n\n.modal form .button {\n\ttext-align: center;\n\tpadding: 0.25rem 0.5rem;\n\tfont-size: 0.9rem;\n}\n\n.modal form .save-button {\n\tbackground-color: var(--color-accent);\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-background);\n\tborder-radius: 0;\n\tfont-family: var(--ff);\n}\n\n.modal form .cancel-button:hover {\n\tbackground-color: var(--color-super-transparent);\n\ttext-decoration: underline;\n}\n.modal form .save-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n\ttext-decoration: underline;\n}\n\n@media screen and (max-width: 880px) {\n\theader {\n\t\tdisplay: grid;\n\t\talign-items: center;\n\t\tgrid-template-columns: auto 1fr;\n\t\tgap: 1rem;\n\t}\n\t.ham {\n\t\tpadding: 0.2rem;\n\t\tmargin-left: -1rem;\n\t\tdisplay: grid;\n\t\tgap: 0.4rem;\n\t\talign-items: center;\n\t\theight: max-content;\n\t\twidth: max-content;\n\t\tcursor: pointer;\n\t}\n\t.ham > * {\n\t\theight: 2px;\n\t\twidth: 1.5rem;\n\t\tbackground-color: var(--color-white);\n\t\tpointer-events: none;\n\t\ttransform-origin: left;\n\t\ttransition: transform 0.25s ease;\n\t}\n\n\t.ham.click > div:nth-of-type(2) {\n\t\topacity: 0;\n\t}\n\t.ham.click > div:nth-of-type(1) {\n\t\ttransform: rotate(45deg);\n\t}\n\t.ham.click > div:nth-of-type(3) {\n\t\ttransform: rotate(-45deg);\n\t}\n\n\t.add-button {\n\t\tright: 0.5rem;\n\t\tbottom: 0.5rem;\n\t\theight: 3rem;\n\t\twidth: 3rem;\n\t\tfont-size: 3rem;\n\t}\n\n\tsection {\n\t\tgrid-template: 1fr / 1fr;\n\t}\n\tsection aside {\n\t\tposition: absolute;\n\t\tleft: -300px;\n\t\ttransition: transform 0.25s ease;\n\t}\n\tsection.reveal aside {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t}\n\tmain {\n\t\tpadding: 1rem 1rem;\n\t}\n\n\tmain li section.reveal {\n\t\tgrid-template: 1fr / 1fr;\n\t}\n\t.list-container li .icon:not(.flag-icon) {\n\t\tvisibility: visible;\n\t}\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Heebo:wght@100;200;300;400;500;600;700;800;900&display=swap");\n\n:root {\n\t--color-accent: #4f85cc;\n\t--color-accent-highlight: #62a0f1;\n\t--color-accent-transparent: #4f85cc2f;\n\t--color-super-transparent: #0000000e;\n\t--color-aside: #f1f1f1;\n\t--color-white: #fff;\n\t--color-text: #202020;\n\t--color-dark: #202020;\n\t--color-overlay: #20202069;\n\t--color-text-light: #444444b0;\n\t--color-background: #fff;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url(./check-empty.svg);\n\t--check-filled: url(./check-filled.svg);\n}\n\n:root.darkmode {\n\t--color-accent: #88b0e6;\n\t--color-accent-highlight: #9fc2f0;\n\t--color-accent-transparent: #88b0e62f;\n\t--color-super-transparent: #ffffff0e;\n\t--color-aside: #2b2b2b;\n\t--color-white: #fff;\n\t--color-text: #e9e9e9;\n\t--color-overlay: #cccccc69;\n\t--color-dark: #202020;\n\t--color-text-light: #cacacac2;\n\t--color-background: #1f1f1f;\n\t--color-grey: #d3d3d3;\n\t--ff: Heebo, sans-serif;\n\t--check-empty: url(./check-empty-dark.svg);\n\t--check-filled: url(./check-filled-dark.svg);\n}\n\n*,\n*::after,\n*::before {\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n::-webkit-scrollbar {\n\twidth: 0.4rem;\n\theight: 0.4rem;\n}\n\n::-webkit-scrollbar-track {\n\tbackground-color: var(--color-super-transparent);\n}\n\n::-webkit-scrollbar-thumb {\n\tbackground-color: #27272760;\n\tbackground-color: var(--color-accent);\n\tborder-radius: 500vh;\n\ttransition: all 1.15s ease-in;\n\tbackground-clip: padding-box;\n}\n\nbody {\n\tbackground-color: var(--color-background);\n\tcolor: var(--color-text);\n\tfont-family: var(--ff);\n\tdisplay: grid;\n\tgrid-template: auto 1fr/ 1fr;\n\theight: calc(var(--vh) * 100px);\n\toverflow: hidden;\n}\n\nheader {\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tpadding: 0.5rem 1.5rem;\n}\n\n.header-logo {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.6rem;\n}\n\n.header-img-container {\n\theight: 23px;\n\twidth: 23px;\n}\n\n.header-text-container {\n\tuser-select: none;\n\tdisplay: flex;\n\talign-items: baseline;\n\tgap: 0.25rem;\n\tline-height: 1;\n}\n\n.header-text-container h2 {\n\tfont-weight: 400;\n}\n\n.header-text-container h2 + * {\n\topacity: 0;\n\ttransition: opacity 0.5s ease;\n}\n\n.header-logo:hover .header-text-container h2 + * {\n\t/* font-weight: 400; */\n\topacity: 1;\n}\n\n.header-img-container svg path {\n\tfill: var(--color-white);\n\tfill: var(--color-white);\n}\n\nsection {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tposition: relative;\n\tdisplay: grid;\n\tgrid-template: 1fr / 300px 1fr;\n\toverflow: hidden;\n}\n\naside {\n\t/* position: absolute; */\n\theight: 100%;\n\tpadding: 1rem 1rem 0.25rem;\n\tbackground-color: var(--color-aside);\n\toverflow: hidden;\n\tdisplay: grid;\n\tgrid-template: 1fr max-content max-content/ 1fr;\n\tgap: 0.5rem;\n\toverflow: hidden;\n\tz-index: 2;\n}\n/* \nsection.reveal {\n\tgrid-template: 1fr / 300px 1fr;\n}\n\nsection.reveal aside {\n\tposition: relative;\n\tleft: 0;\n} */\n\n.sidebar-li-container {\n\tdisplay: grid;\n\tflex-direction: column;\n\tgap: 0rem;\n\tuser-select: none;\n\toverflow: hidden;\n}\n\n.sidebar-li-container > * {\n\tdisplay: grid;\n\tgrid-template: 1fr / auto 1fr;\n\tgap: 0 1rem;\n\talign-items: center;\n\tfont-size: 1.2rem;\n\tfont-weight: 400;\n\tpadding: 0.25rem 1rem;\n}\n\n.sidebar-li-container > *:not(:last-child) {\n\tcursor: pointer;\n}\n\n.sidebar-li-container > li:last-of-type {\n\theight: 100%;\n\toverflow-y: hidden;\n\tgrid-template: auto 1fr / auto 1fr;\n}\n\n.sidebar-li-container > li:last-of-type > ul {\n\tgrid-column: 1 / 3;\n\tlist-style: none;\n\tmargin-left: 2.5rem;\n\tmax-height: calc(var(--vh) * 50px);\n\toverflow-y: auto;\n\toverflow-x: hidden;\n\talign-self: flex-start;\n}\n\n.sidebar-li-container > li:last-of-type > ul li {\n\tpadding: 0 0.5rem;\n\tfont-weight: 200;\n\tfont-size: 0.9rem;\n\tcursor: pointer;\n\tdisplay: grid;\n\talign-items: center;\n\tgap: 0.25rem;\n\tgrid-template-columns: auto 1fr;\n}\n.sidebar-li-container > li:last-of-type > ul li:not(*:first-child) {\n\tgrid-template-columns: 1fr auto;\n}\n.sidebar-li-container > li:last-of-type ul li svg path {\n\tfill: var(--color-text);\n}\n.sidebar-li-container > li:last-of-type ul li:hover > svg path {\n\tfill: var(--color-accent);\n}\n\n.sidebar-li-container > li:last-of-type ul li div:hover path {\n\tfill: red;\n}\n.sidebar-li-container > li:last-of-type > ul li svg {\n\theight: 13px;\n\tuser-select: none;\n\topacity: 0.5;\n}\n.sidebar-li-container > li:last-of-type > ul li:hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > *:not(:last-child):hover {\n\tbackground-color: var(--color-background);\n}\n\n.sidebar-li-container > * svg {\n\tdisplay: block;\n\theight: 18px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.date-icon {\n\tposition: relative;\n}\n\n.date-icon h6 {\n\tposition: absolute;\n\tfont-size: 0.65rem;\n\tfont-weight: 400;\n\ttop: 20%;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tcolor: #1dba23;\n}\n\n.sidebar-footer {\n\theight: max-content;\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.5rem;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.website-button {\n\tbackground-color: var(--color-accent);\n\tpadding: 0.2rem 0.4rem;\n\ttext-decoration: none;\n\twidth: max-content;\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\ttransition: background 0.25s ease;\n}\n\n.website-button:hover {\n\ttext-decoration: underline;\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.darkmode-label {\n\twidth: max-content;\n\tdisplay: flex;\n\tgap: 0.5rem;\n\talign-items: center;\n\tcursor: pointer;\n\tcolor: var(--color-text-light);\n\tfont-size: 0.9rem;\n}\n\n.darkmode-check {\n\tdisplay: none;\n}\n\n.darkmode-switch {\n\tposition: relative;\n\theight: 1rem;\n\twidth: 2rem;\n\tbackground: var(--color-white);\n\tbackground: var(--color-white);\n\tborder-radius: 500vh;\n\tbox-shadow: inset 0 0 0 1px var(--color-grey);\n\toverflow: hidden;\n\ttransition: background 0.4s ease;\n}\n\n.darkmode-switch::after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbackground-color: var(--color-white);\n\tbackground-color: var(--color-white);\n\tborder-radius: 50%;\n\theight: 1rem;\n\twidth: 1rem;\n\tborder: 2px solid var(--color-grey);\n\ttransition: transform 0.2s ease;\n}\n\n.darkmode-check:checked + .darkmode-switch {\n\tbackground-color: var(--color-accent);\n}\n\n.darkmode-check:checked + .darkmode-switch::after {\n\ttransform: translateX(100%);\n}\n\nmain {\n\tpadding: 1rem 7rem 3rem;\n\toverflow: hidden;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n\tz-index: 0;\n}\n\nmain h2 {\n\tfont-weight: 400;\n\tfont-size: 2rem;\n}\n\n.list-container {\n\tdisplay: grid;\n\tlist-style: none;\n\toverflow-y: auto;\n\t/* background-color: var(--color-grey); */\n}\n\n.list-container > li + li {\n\tborder-top: 1px solid var(--color-accent-transparent);\n}\n\n.list-container li {\n\tpadding: 0.5rem;\n}\n\n.add-button {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tline-height: 1;\n\tbackground-color: var(--color-accent);\n\tcolor: var(--color-white);\n\tcolor: var(--color-white);\n\tposition: absolute;\n\tbottom: 2rem;\n\tright: 2rem;\n\tfont-size: 3rem;\n\tfont-weight: 200;\n\theight: 4rem;\n\twidth: 4rem;\n\tborder-radius: 50%;\n\tuser-select: none;\n\tcursor: pointer;\n\ttransition: background 0.25s ease;\n\tz-index: 1;\n}\n\n.add-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n}\n\n.list-container .note-li {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr repeat(4, auto);\n\talign-items: baseline;\n\tgap: 0rem 1rem;\n\tuser-select: none;\n}\n\n.list-container li:hover {\n\tbackground-color: var(--color-super-transparent);\n}\n\n.list-container li .icon {\n\tcursor: pointer;\n\tdisplay: block;\n}\n\n.list-container li .icon:not(.flag-icon) path {\n\tfill: var(--color-text);\n}\n.list-container li .icon:not(.flag-icon) {\n\tvisibility: hidden;\n}\n.list-container li:hover .icon:not(.flag-icon) {\n\tvisibility: visible;\n}\n\n.list-container li .checkbox-container {\n\tbackground: center / cover var(--check-empty);\n\theight: 12px;\n\twidth: 12px;\n\tposition: relative;\n\tcursor: pointer;\n}\n\n.list-container li .checkbox-container:hover {\n\tbox-shadow: 0 0 0 1px var(--color-background),\n\t\t0 0 0 2px var(--color-accent-transparent);\n}\n\n.list-container li.checked-li .checkbox-container {\n\tbackground: center / cover var(--check-filled);\n}\n\n.check-icon {\n\tpointer-events: none;\n\tdisplay: none;\n}\n\n.list-container li h3 {\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.list-container li.expanded h3 {\n\tword-wrap: break-word;\n\tword-break: break-all;\n\ttext-overflow: unset;\n}\n\n.list-container li h3,\n.list-container li p,\n.list-container li h5 {\n\tfont-weight: 300;\n}\n\n.list-container .note-li p {\n\t/* max-width: 300px; */\n\ttransition: transform 0.25s ease, height 0s 0.25s;\n\ttransform-origin: top;\n\theight: 0;\n\toverflow: hidden;\n\tword-wrap: break-word;\n\tgrid-column: 2 / 5;\n\ttransform: scaleY(0);\n}\n\n.message-li {\n\tfont-size: 1.3rem;\n\tfont-weight: 600;\n\tdisplay: grid;\n\ttext-align: center;\n\talign-self: center;\n\tjustify-self: center;\n\tcolor: var(--color-text);\n\topacity: 0.4;\n\tuser-select: none;\n}\n.list-container .message-li:hover {\n\tbackground-color: transparent;\n}\n\n.message-li p {\n\tfont-size: 0.9rem;\n}\n\n.list-container li.expanded {\n\ttransition: all 0s ease;\n\tbackground-color: var(--color-super-transparent);\n\n\tgap: 1rem;\n}\n\n.list-container li.expanded p {\n\ttransition: transform 0.25s ease;\n\theight: min-content;\n\ttransform: scaleY(1);\n\toverflow: auto;\n}\n\n.list-container li svg {\n\theight: 15px;\n\twidth: auto;\n\tpointer-events: none;\n}\n\n.list-container li.checked-li > h3 {\n\ttext-decoration: line-through;\n}\n.list-container li.checked-li > * {\n\topacity: 0.5;\n}\n\n.list-container li .flag-icon {\n\tposition: relative;\n}\n.list-container li .flag-icon::after {\n\tcontent: "";\n\theight: 16px;\n\ttop: 1px;\n\tleft: 1px;\n\tposition: absolute;\n\twidth: 2px;\n\tbackground-color: var(--color-text);\n}\n\n.list-container li.high .flag-icon path {\n\tfill: red;\n}\n.list-container li.normal .flag-icon path {\n\tfill: orange;\n}\n.list-container li.low .flag-icon path {\n\tfill: green;\n}\n\n.modal {\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tz-index: 5;\n}\n\n.modal-overlay {\n\tbackground-color: var(--color-overlay);\n\t/* opacity: 0.6; */\n\theight: 100%;\n\twidth: 100%;\n\tposition: absolute;\n\tz-index: 1;\n}\n\n.modal form {\n\tbackground-color: var(--color-background);\n\tborder: 1px solid var(--color-super-transparent);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(6, auto) / repeat(2, 1fr);\n\twidth: 300px;\n\tcolor: var(--color-text);\n}\n.add-project-modal form {\n\tbackground-color: var(--color-background);\n\tz-index: 100;\n\tdisplay: grid;\n\tpadding: 2rem;\n\tgap: 1rem;\n\tgrid-template: repeat(2, auto) / repeat(2, 1fr);\n\twidth: 300px;\n}\n\n.modal form *:not(label) {\n\toutline: none;\n\tborder: none;\n\tbackground-color: transparent;\n\tborder-bottom: 1px solid var(--color-accent-transparent);\n\tcolor: var(--color-text);\n}\n\n.modal form *:not(label, button):focus {\n\tborder-bottom: 1px solid var(--color-accent);\n\tcolor: var(--color-text);\n}\n\n.modal form > *:not(.button) {\n\tgrid-column: 1 / 3;\n\tfont-size: 0.8rem;\n\toutline: none;\n\tfont-family: var(--ff);\n}\n\n.modal form > label {\n\tcolor: var(--color-text);\n\tdisplay: flex;\n\tgap: 0.5rem;\n}\n\n.modal form input,\n.modal form textarea {\n\tpadding: 0.25rem 0.5rem;\n}\n\n.modal form .cancel-button {\n\tdisplay: inline-block;\n\t/* width: max-content; */\n\tbackground-color: transparent;\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-text);\n}\n\n.modal form .button {\n\ttext-align: center;\n\tpadding: 0.25rem 0.5rem;\n\tfont-size: 0.9rem;\n}\n\n.modal form .save-button {\n\tbackground-color: var(--color-accent);\n\tborder: none;\n\toutline: none;\n\tcursor: pointer;\n\tcolor: var(--color-background);\n\tborder-radius: 0;\n\tfont-family: var(--ff);\n}\n\n.modal form .cancel-button:hover {\n\tbackground-color: var(--color-super-transparent);\n\ttext-decoration: underline;\n}\n.modal form .save-button:hover {\n\tbackground-color: var(--color-accent-highlight);\n\ttext-decoration: underline;\n}\n\n@media screen and (max-width: 880px) {\n\theader {\n\t\tdisplay: grid;\n\t\talign-items: center;\n\t\tgrid-template-columns: auto 1fr;\n\t\tgap: 1rem;\n\t}\n\t.ham {\n\t\tpadding: 0.2rem;\n\t\tmargin-left: -1rem;\n\t\tdisplay: grid;\n\t\tgap: 0.4rem;\n\t\talign-items: center;\n\t\theight: max-content;\n\t\twidth: max-content;\n\t\tcursor: pointer;\n\t}\n\t.ham > * {\n\t\theight: 2px;\n\t\twidth: 1.5rem;\n\t\tbackground-color: var(--color-white);\n\t\tpointer-events: none;\n\t\ttransform-origin: left;\n\t\ttransition: transform 0.25s ease;\n\t}\n\n\t.ham.click > div:nth-of-type(2) {\n\t\topacity: 0;\n\t}\n\t.ham.click > div:nth-of-type(1) {\n\t\ttransform: rotate(45deg);\n\t}\n\t.ham.click > div:nth-of-type(3) {\n\t\ttransform: rotate(-45deg);\n\t}\n\n\t.add-button {\n\t\tright: 0.5rem;\n\t\tbottom: 0.5rem;\n\t\theight: 3rem;\n\t\twidth: 3rem;\n\t\tfont-size: 3rem;\n\t}\n\n\tsection {\n\t\tgrid-template: 1fr / 1fr;\n\t}\n\tsection aside {\n\t\tposition: absolute;\n\t\tleft: -300px;\n\t\ttransition: transform 0.25s ease;\n\t}\n\tsection.reveal aside {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t}\n\tmain {\n\t\tpadding: 1rem 1rem;\n\t}\n\n\tmain li section.reveal {\n\t\tgrid-template: 1fr / 1fr;\n\t}\n\t.list-container li .icon:not(.flag-icon) {\n\t\tvisibility: visible;\n\t}\n}\n'],sourceRoot:""}]);const p=C},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(t);!(i=(r=n.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(t){c=!0,o=t}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(l," */"),d=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[a].concat(d).concat([s]).join("\n")}return[a].join("\n")}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},695:t=>{"use strict";var e={};t.exports=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],c=0;c<t.length;c++){var l=t[c],s=r.base?l[0]+r.base:l[0],d=a[s]||0,A="".concat(s," ").concat(d);a[s]=d+1;var u=n(A),C={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(e[u].references++,e[u].updater(C)):e.push({identifier:A,updater:o(C,r),references:1}),i.push(A)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var c=n(a[i]);e[c].references--}for(var l=r(t,o),s=0;s<a.length;s++){var d=n(a[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=l}}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},380:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r=n.css,o=n.media,a=n.sourceMap;o?t.setAttribute("media",o):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},582:(t,e,n)=>{var r;!function(o,a){"use strict";var i="file:"===o.location.protocol,c=a.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1"),l=Array.prototype.forEach||function(t,e){if(null==this||"function"!=typeof t)throw new TypeError;var n,r=this.length>>>0;for(n=0;n<r;++n)n in this&&t.call(e,this[n],n,this)},s={},d=0,A=[],u=[],C={},m=function(t){return t.cloneNode(!0)},g=function(t,e){u[t]=u[t]||[],u[t].push(e)},f=function(t,e,n,r){var a=t.getAttribute("data-src")||t.getAttribute("src");if(/\.svg/i.test(a))if(c)-1===A.indexOf(t)&&(A.push(t),t.setAttribute("src",""),function(t,e){if(void 0!==s[t])s[t]instanceof SVGSVGElement?e(m(s[t])):g(t,e);else{if(!o.XMLHttpRequest)return e("Browser does not support XMLHttpRequest"),!1;s[t]={},g(t,e);var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){if(404===n.status||null===n.responseXML)return e("Unable to load SVG file: "+t),i&&e("Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver."),e(),!1;if(!(200===n.status||i&&0===n.status))return e("There was a problem injecting the SVG: "+n.status+" "+n.statusText),!1;if(n.responseXML instanceof Document)s[t]=n.responseXML.documentElement;else if(DOMParser&&DOMParser instanceof Function){var r;try{r=(new DOMParser).parseFromString(n.responseText,"text/xml")}catch(t){r=void 0}if(!r||r.getElementsByTagName("parsererror").length)return e("Unable to parse SVG file: "+t),!1;s[t]=r.documentElement}!function(t){for(var e=0,n=u[t].length;e<n;e++)!function(e){setTimeout((function(){u[t][e](m(s[t]))}),0)}(e)}(t)}},n.open("GET",t),n.overrideMimeType&&n.overrideMimeType("text/xml"),n.send()}}(a,(function(n){if(void 0===n||"string"==typeof n)return r(n),!1;var i=t.getAttribute("id");i&&n.setAttribute("id",i);var c=t.getAttribute("title");c&&n.setAttribute("title",c);var s=[].concat(n.getAttribute("class")||[],"injected-svg",t.getAttribute("class")||[]).join(" ");n.setAttribute("class",function(t){for(var e={},n=(t=t.split(" ")).length,r=[];n--;)e.hasOwnProperty(t[n])||(e[t[n]]=1,r.unshift(t[n]));return r.join(" ")}(s));var u=t.getAttribute("style");u&&n.setAttribute("style",u);var m=[].filter.call(t.attributes,(function(t){return/^data-\w[\w\-]*$/.test(t.name)}));l.call(m,(function(t){t.name&&t.value&&n.setAttribute(t.name,t.value)}));var g,f,h,p,v,b={clipPath:["clip-path"],"color-profile":["color-profile"],cursor:["cursor"],filter:["filter"],linearGradient:["fill","stroke"],marker:["marker","marker-start","marker-mid","marker-end"],mask:["mask"],pattern:["fill","stroke"],radialGradient:["fill","stroke"]};Object.keys(b).forEach((function(t){g=t,h=b[t];for(var e=0,r=(f=n.querySelectorAll("defs "+g+"[id]")).length;e<r;e++){var o;p=f[e].id,v=p+"-"+d,l.call(h,(function(t){for(var e=0,r=(o=n.querySelectorAll("["+t+'*="'+p+'"]')).length;e<r;e++)o[e].setAttribute(t,"url(#"+v+")")})),f[e].id=v}})),n.removeAttribute("xmlns:a");for(var B,w,y=n.querySelectorAll("script"),x=[],k=0,E=y.length;k<E;k++)(w=y[k].getAttribute("type"))&&"application/ecmascript"!==w&&"application/javascript"!==w||(B=y[k].innerText||y[k].textContent,x.push(B),n.removeChild(y[k]));if(x.length>0&&("always"===e||"once"===e&&!C[a])){for(var S=0,T=x.length;S<T;S++)new Function(x[S])(o);C[a]=!0}var L=n.querySelectorAll("style");l.call(L,(function(t){t.textContent+=""})),t.parentNode.replaceChild(n,t),delete A[A.indexOf(t)],t=null,d++,r(n)})));else{var f=t.getAttribute("data-fallback")||t.getAttribute("data-png");f?(t.setAttribute("src",f),r(null)):n?(t.setAttribute("src",n+"/"+a.split("/").pop().replace(".svg",".png")),r(null)):r("This browser does not support SVG and no PNG fallback was defined.")}else r("Attempted to inject a file with a non-svg extension: "+a)},h=function(t,e,n){var r=(e=e||{}).evalScripts||"always",o=e.pngFallback||!1,a=e.each;if(void 0!==t.length){var i=0;l.call(t,(function(e){f(e,r,o,(function(e){a&&"function"==typeof a&&a(e),n&&t.length===++i&&n(i)}))}))}else t?f(t,r,o,(function(e){a&&"function"==typeof a&&a(e),n&&n(1),t=null})):n&&n(0)};"object"==typeof t.exports?t.exports=e=h:void 0===(r=function(){return h}.call(e,n,e,t))||(t.exports=r)}(window,document)},208:(t,e,n)=>{"use strict";t.exports=n.p+"b17fc151d5709d95e62d.svg"},121:(t,e,n)=>{"use strict";t.exports=n.p+"a1a8f9a430b30331a432.svg"},397:(t,e,n)=>{"use strict";t.exports=n.p+"0347aa3ad7e10815c1d8.svg"},924:(t,e,n)=>{"use strict";t.exports=n.p+"8919e66b4570e33b8b93.svg"},33:(t,e,n)=>{"use strict";t.exports=n.p+"0b2b514fa93c01a14653.svg"},839:(t,e,n)=>{"use strict";t.exports=n.p+"9cef2a5df753bef9310d.svg"},31:(t,e,n)=>{"use strict";t.exports=n.p+"156c9cc0902a7b8b9950.svg"},795:(t,e,n)=>{"use strict";t.exports=n.p+"96ee3277aeab380f280a.svg"},849:(t,e,n)=>{"use strict";t.exports=n.p+"d3d59b1b655516e6d0f7.svg"},541:(t,e,n)=>{"use strict";t.exports=n.p+"3a702c8e6bc17214fef2.svg"},464:(t,e,n)=>{"use strict";t.exports=n.p+"0ed7142e57e319840dff.svg"},240:(t,e,n)=>{"use strict";t.exports=n.p+"f965f1f542b97f1df123.svg"},423:(t,e,n)=>{"use strict";t.exports=n.p+"cda5dccb48bd41faa621.svg"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{"use strict";var t=n(464),e=n(849),r=n(795),o=n(31),a=n(121),i=n(208),c=n(541),l=n(423),s=n(240),d=n(379),A=n.n(d),u=n(380),C=n.n(u),m=n(695),g=n.n(m),f=n(216),h=n.n(f),p=n(426),v={styleTagTransform:function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}},setAttributes:function(t){var e=n.nc;e&&t.setAttribute("nonce",e)},insert:function(t){var e=g()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}};v.domAPI=C(),v.insertStyleElement=h(),A()(p.Z,v),p.Z&&p.Z.locals&&p.Z.locals;var b=n(582),B=n.n(b);const w=function(){let t=[],e=["Home"];return localStorage.getItem("projectList")&&(e=JSON.parse(localStorage.getItem("projectList"))),localStorage.getItem("notesList")&&(t=JSON.parse(localStorage.getItem("notesList"))),{getNotesList:function(){return[...t]},setNotes:function(...e){const n=function(t,e,n,r,o,a){return{title:t,description:e,dueDate:n,priority:r,isDone:o,category:a}}(...e);t.unshift(n),localStorage.setItem("notesList",JSON.stringify(t))},removeNote:function(e){t.splice(e,1),localStorage.setItem("notesList",JSON.stringify(t))},getProjectList:function(){return[...e]},setProject:function(t){e.push(t),localStorage.setItem("projectList",JSON.stringify(e))},removeProject:function(t){e.splice(t,1),localStorage.setItem("projectList",JSON.stringify(e))},editSingleNoteProperty:function(e,n,r){t[e][n]=r,localStorage.setItem("notesList",JSON.stringify(t))}}}();function y(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function x(t){y(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function k(t){y(1,arguments);var e=x(t);return!isNaN(e)}var E={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function S(t){return function(e){var n=e||{},r=n.width?String(n.width):t.defaultWidth;return t.formats[r]||t.formats[t.defaultWidth]}}var T,L={date:S({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:S({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:S({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function P(t){return function(e,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,i=o.width?String(o.width):a;r=t.formattingValues[i]||t.formattingValues[a]}else{var c=t.defaultWidth,l=o.width?String(o.width):t.defaultWidth;r=t.values[l]||t.values[c]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function M(t){return function(e,n){var r=String(e),o=n||{},a=o.width,i=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],c=r.match(i);if(!c)return null;var l,s=c[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth];return l="[object Array]"===Object.prototype.toString.call(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(d),l=t.valueCallback?t.valueCallback(l):l,{value:l=o.valueCallback?o.valueCallback(l):l,rest:r.slice(s.length)}}}const q={code:"en-US",formatDistance:function(t,e,n){var r;return n=n||{},r="string"==typeof E[t]?E[t]:1===e?E[t].one:E[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:L,formatRelative:function(t,e,n,r){return D[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:P({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:P({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:P({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:P({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:P({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),r=e||{},o=n.match(T.matchPattern);if(!o)return null;var a=o[0],i=n.match(T.parsePattern);if(!i)return null;var c=T.valueCallback?T.valueCallback(i[0]):i[0];return{value:c=r.valueCallback?r.valueCallback(c):c,rest:n.slice(a.length)}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function Y(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function j(t,e){y(2,arguments);var n=x(t).getTime(),r=Y(e);return new Date(n+r)}function N(t,e){y(2,arguments);var n=Y(e);return j(t,-n)}function U(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const W=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return U("yy"===e?r%100:r,e.length)},z=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):U(n+1,2)},O=function(t,e){return U(t.getUTCDate(),e.length)},X=function(t,e){return U(t.getUTCHours()%12||12,e.length)},H=function(t,e){return U(t.getUTCHours(),e.length)},I=function(t,e){return U(t.getUTCMinutes(),e.length)},Z=function(t,e){return U(t.getUTCSeconds(),e.length)},F=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,n-3)),e.length)};var G=864e5;function R(t){y(1,arguments);var e=1,n=x(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function Q(t){y(1,arguments);var e=x(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=R(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=R(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function V(t){y(1,arguments);var e=Q(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=R(n);return r}var J=6048e5;function $(t,e){y(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.weekStartsOn,a=null==o?0:Y(o),i=null==n.weekStartsOn?a:Y(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=x(t),l=c.getUTCDay(),s=(l<i?7:0)+l-i;return c.setUTCDate(c.getUTCDate()-s),c.setUTCHours(0,0,0,0),c}function _(t,e){y(1,arguments);var n=x(t,e),r=n.getUTCFullYear(),o=e||{},a=o.locale,i=a&&a.options&&a.options.firstWeekContainsDate,c=null==i?1:Y(i),l=null==o.firstWeekContainsDate?c:Y(o.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=new Date(0);s.setUTCFullYear(r+1,0,l),s.setUTCHours(0,0,0,0);var d=$(s,e),A=new Date(0);A.setUTCFullYear(r,0,l),A.setUTCHours(0,0,0,0);var u=$(A,e);return n.getTime()>=d.getTime()?r+1:n.getTime()>=u.getTime()?r:r-1}function K(t,e){y(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,a=null==o?1:Y(o),i=null==n.firstWeekContainsDate?a:Y(n.firstWeekContainsDate),c=_(t,e),l=new Date(0);l.setUTCFullYear(c,0,i),l.setUTCHours(0,0,0,0);var s=$(l,e);return s}var tt=6048e5;function et(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+U(a,2)}function nt(t,e){return t%60==0?(t>0?"-":"+")+U(Math.abs(t)/60,2):rt(t,e)}function rt(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+U(Math.floor(o/60),2)+n+U(o%60,2)}const ot={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return W(t,e)},Y:function(t,e,n,r){var o=_(t,r),a=o>0?o:1-o;return"YY"===e?U(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):U(a,e.length)},R:function(t,e){return U(Q(t),e.length)},u:function(t,e){return U(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return U(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return z(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){y(1,arguments);var n=x(t),r=$(n,e).getTime()-K(n,e).getTime();return Math.round(r/tt)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):U(o,e.length)},I:function(t,e,n){var r=function(t){y(1,arguments);var e=x(t),n=R(e).getTime()-V(e).getTime();return Math.round(n/J)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):U(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):O(t,e)},D:function(t,e,n){var r=function(t){y(1,arguments);var e=x(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/G)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):U(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return U(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});case"eeee":default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return U(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});case"cccc":default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return U(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return X(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):H(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):U(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):U(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):I(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Z(t,e)},S:function(t,e){return F(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return nt(o);case"XXXX":case"XX":return rt(o);case"XXXXX":case"XXX":default:return rt(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return nt(o);case"xxxx":case"xx":return rt(o);case"xxxxx":case"xxx":default:return rt(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+et(o,":");case"OOOO":default:return"GMT"+rt(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+et(o,":");case"zzzz":default:return"GMT"+rt(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return U(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return U((r._originalDate||t).getTime(),e.length)}};function at(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function it(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const ct={p:it,P:function(t,e){var n,r=t.match(/(P+)(p+)?/),o=r[1],a=r[2];if(!a)return at(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;case"PPPP":default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",at(o,e)).replace("{{time}}",it(a,e))}};function lt(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var st=["D","DD"],dt=["YY","YYYY"];function At(t){return-1!==st.indexOf(t)}function ut(t){return-1!==dt.indexOf(t)}function Ct(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var mt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,gt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,ht=/''/g,pt=/[a-zA-Z]/;function vt(t,e,n){y(2,arguments);var r=String(e),o=n||{},a=o.locale||q,i=a.options&&a.options.firstWeekContainsDate,c=null==i?1:Y(i),l=null==o.firstWeekContainsDate?c:Y(o.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=a.options&&a.options.weekStartsOn,d=null==s?0:Y(s),A=null==o.weekStartsOn?d:Y(o.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var u=x(t);if(!k(u))throw new RangeError("Invalid time value");var C=lt(u),m=N(u,C),g={firstWeekContainsDate:l,weekStartsOn:A,locale:a,_originalDate:u},f=r.match(gt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ct[e])(t,a.formatLong,g):t})).join("").match(mt).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return bt(n);var i=ot[r];if(i)return!o.useAdditionalWeekYearTokens&&ut(n)&&Ct(n,e,t),!o.useAdditionalDayOfYearTokens&&At(n)&&Ct(n,e,t),i(m,n,a.localize,g);if(r.match(pt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return f}function bt(t){return t.match(ft)[1].replace(ht,"'")}var Bt=36e5,wt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},yt=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,xt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,kt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Et(t,e){y(1,arguments);var n=e||{},r=null==n.additionalDigits?2:Y(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var o,a=St(t);if(a.date){var i=Tt(a.date,r);o=Lt(i.restDateString,i.year)}if(isNaN(o)||!o)return new Date(NaN);var c,l=o.getTime(),s=0;if(a.time&&(s=Pt(a.time),isNaN(s)||null===s))return new Date(NaN);if(!a.timezone){var d=new Date(l+s),A=new Date(0);return A.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),A.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),A}return c=qt(a.timezone),isNaN(c)?new Date(NaN):new Date(l+s+c)}function St(t){var e,n={},r=t.split(wt.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,e=r[0]):(n.date=r[0],e=r[1],wt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(wt.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var o=wt.timezone.exec(e);o?(n.time=e.replace(o[1],""),n.timezone=o[1]):n.time=e}return n}function Tt(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:null};var o=r[1]&&parseInt(r[1]),a=r[2]&&parseInt(r[2]);return{year:null==a?o:100*a,restDateString:t.slice((r[1]||r[2]).length)}}function Lt(t,e){if(null===e)return null;var n=t.match(yt);if(!n)return null;var r=!!n[4],o=Dt(n[1]),a=Dt(n[2])-1,i=Dt(n[3]),c=Dt(n[4]),l=Dt(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,c,l)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var o=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,c,l):new Date(NaN);var s=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(Yt[e]||(jt(t)?29:28))}(e,a,i)&&function(t,e){return e>=1&&e<=(jt(t)?366:365)}(e,o)?(s.setUTCFullYear(e,a,Math.max(o,i)),s):new Date(NaN)}function Dt(t){return t?parseInt(t):1}function Pt(t){var e=t.match(xt);if(!e)return null;var n=Mt(e[1]),r=Mt(e[2]),o=Mt(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,o)?n*Bt+6e4*r+1e3*o:NaN}function Mt(t){return t&&parseFloat(t.replace(",","."))||0}function qt(t){if("Z"===t)return 0;var e=t.match(kt);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,o)?n*(r*Bt+6e4*o):NaN}var Yt=[31,null,31,30,31,30,31,31,30,31,30,31];function jt(t){return t%400==0||t%4==0&&t%100}!function(){function n(t){t.target.classList.contains("click")?(t.target.classList.remove("click"),document.querySelector("section").classList.remove("reveal")):(t.target.classList.add("click"),document.querySelector("section").classList.add("reveal"))}function d(){document.querySelectorAll(".project-list li").forEach((t=>t.remove()))}function A(){!function(){const t=document.createElement("div"),e=document.createElement("div"),n=document.createElement("form"),r=document.createElement("input"),o=document.createElement("button"),a=document.createElement("div");r.setAttribute("placeholder","Project Name"),r.required=!0,o.textContent="Save",a.textContent="Cancel",e.classList.add("modal-overlay"),t.classList.add("modal"),t.classList.add("add-project-modal"),a.classList.add("button"),o.classList.add("button"),o.classList.add("save-button"),a.classList.add("cancel-button"),o.addEventListener("click",(e=>{r.value&&(w.setProject(r.value),t.remove(),d(),u(document.querySelector(".project-list")),x(),e.preventDefault())})),a.addEventListener("click",(e=>{t.remove(),e.preventDefault()})),n.append(r,a,o),t.append(e,n),document.body.append(t),r.focus()}()}function u(t){const e=document.createElement("li"),n=new Image;n.src=i,n.classList.add("svg-icon"),e.classList.add(".add-new-project"),e.addEventListener("click",A),e.append(n,"Add new project"),t.append(e);for(let e=1;e<w.getProjectList().length;e++){const n=document.createElement("li"),r=document.createElement("div"),o=new Image;o.src=a,o.classList.add("svg-icon"),n.innerText=w.getProjectList()[e],n.addEventListener("click",p),n.dataset.index=e,r.append(o),r.addEventListener("click",C),n.append(r),t.append(n)}}function C(t){const e=document.querySelector(".page-head"),n=[];for(let e=0;e<w.getNotesList().length;e++)w.getNotesList()[e].category===t.target.parentElement.innerText&&n.push(e);n.forEach((t=>{w.editSingleNoteProperty(t,"category","Home")})),w.removeProject(t.target.parentElement.dataset.index),d(),b(),t.target.parentElement.innerText===e.innerText?(e.innerText="Home",y(document.querySelector(".list-container"),"Home")):y(document.querySelector(".list-container"),e.innerText),u(document.querySelector(".project-list")),x(),t.stopPropagation()}function m(){b(),y(document.querySelector(".list-container")),document.querySelector(".page-head").textContent="Today"}function g(){b(),y(document.querySelector(".list-container"),"Home"),document.querySelector(".page-head").textContent="Home"}function f(t){t.target.checked?(document.documentElement.classList.add("darkmode"),localStorage.setItem("theme","dark")):(document.documentElement.classList.remove("darkmode"),localStorage.setItem("theme","light"))}function h(){!function(){const t=["Low Priority","Normal Priority","High Priority"],e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("form"),o=document.createElement("input"),a=document.createElement("textarea"),i=document.createElement("label"),c=document.createElement("select"),l=document.createElement("label"),s=document.createElement("select"),d=document.createElement("input"),A=document.createElement("button"),u=document.createElement("div"),C=document.querySelector(".page-head").textContent;o.setAttribute("placeholder","Title"),o.required=!0,a.required=!0,d.required=!0,a.setAttribute("placeholder","Description..."),a.setAttribute("rows","4"),d.setAttribute("type","date"),A.textContent="Save",u.textContent="Cancel",i.textContent="Set Priority:",l.textContent="Set Category:";for(let e=0;e<3;e++){const n=document.createElement("option");n.value=e+1,n.textContent=t[e],e+1===2&&n.setAttribute("selected","selected"),c.append(n)}for(let t=0;t<w.getProjectList().length;t++){const e=document.createElement("option");e.value=w.getProjectList()[t],e.textContent="Home"===w.getProjectList()[t]?"Default":w.getProjectList()[t];const n=document.querySelector(".page-head").textContent;"Home"===n&&"Today"===n||w.getProjectList()[t]===n&&e.setAttribute("selected","selected"),s.append(e)}n.classList.add("modal-overlay"),e.classList.add("modal"),A.classList.add("save-button"),A.classList.add("button"),u.classList.add("cancel-button"),u.classList.add("button"),i.append(c),l.append(s),A.addEventListener("click",(t=>{o.value&&a.value&&d.value&&(w.setNotes(o.value,a.value,d.value,+c.value,!1,"null"===s?null:s.value),e.remove(),b(),y(document.querySelector(".list-container"),C),t.preventDefault())})),u.addEventListener("click",(t=>{e.remove(),t.preventDefault()})),r.append(o,a,d,i,l,u,A),e.append(n,r),document.body.append(e),o.focus()}()}function p(t){const e=document.querySelector(".list-container");b(),y(e,t.target.innerText),document.querySelector(".page-head").textContent=t.target.innerText}function v(t){const e=t.target,n=e.parentElement.dataset.index;switch(e.classList[0]){case"flag-icon":t.stopPropagation(),e.parentElement.classList.contains("high")?(w.editSingleNoteProperty(n,"priority",1),e.parentElement.classList.remove("high"),e.parentElement.classList.add("low")):e.parentElement.classList.contains("normal")?(w.editSingleNoteProperty(n,"priority",3),e.parentElement.classList.remove("normal"),e.parentElement.classList.add("high")):(e.parentElement.classList.remove("low"),w.editSingleNoteProperty(n,"priority",2),e.parentElement.classList.add("normal"));break;case"edit-icon":t.stopPropagation(),function(t){const e=["Low Priority","Normal Priority","High Priority"],n=document.createElement("div"),r=document.createElement("div"),o=document.createElement("form"),a=document.createElement("input"),i=document.createElement("textarea"),c=document.createElement("label"),l=document.createElement("select"),s=document.createElement("label"),d=document.createElement("select"),A=document.createElement("input"),u=document.createElement("button"),C=document.createElement("div"),m=document.querySelector(".page-head").textContent;a.required=!0,i.required=!0,A.required=!0,a.setAttribute("placeholder","Title"),i.setAttribute("placeholder","Description..."),i.setAttribute("rows","4"),A.setAttribute("type","date"),u.textContent="Save",C.textContent="Cancel",c.textContent="Set Priority:",s.textContent="Set Category:",a.value=w.getNotesList()[t].title,i.value=w.getNotesList()[t].description,A.defaultValue=w.getNotesList()[t].dueDate;for(let n=0;n<3;n++){const r=document.createElement("option");r.value=n+1,r.textContent=e[n],w.getNotesList()[t].priority===n+1&&r.setAttribute("selected","selected"),l.append(r)}for(let e=0;e<w.getProjectList().length;e++){const n=document.createElement("option");n.value=w.getProjectList()[e],n.textContent="Home"===w.getProjectList()[e]?"Default":w.getProjectList()[e],w.getNotesList()[t].category?w.getNotesList()[t].category===n.value&&n.setAttribute("selected","selected"):"null"===n.value&&n.setAttribute("selected","selected"),d.append(n)}r.classList.add("modal-overlay"),n.classList.add("modal"),u.classList.add("save-button"),C.classList.add("cancel-button"),C.classList.add("button"),u.classList.add("button"),c.append(l),s.append(d),u.addEventListener("click",(e=>{a.value&&i.value&&A.value&&(w.editSingleNoteProperty(t,"title",a.value),w.editSingleNoteProperty(t,"description",i.value),w.editSingleNoteProperty(t,"dueDate",A.value),w.editSingleNoteProperty(t,"priority",+l.value),w.editSingleNoteProperty(t,"category","null"===d.value?null:d.value),n.remove(),b(),y(document.querySelector(".list-container"),m),e.preventDefault())})),C.addEventListener("click",(t=>{n.remove(),t.preventDefault()})),o.append(a,i,A,c,s,C,u),n.append(r,o),document.body.append(n),a.focus()}(n);break;case"delete-icon":w.removeNote(n),b(),y(document.querySelector(".list-container")),t.stopPropagation();break;case"checkbox-container":t.stopPropagation();break;case"check-icon":e.checked?(e.parentElement.parentElement.classList.add("checked-li"),w.editSingleNoteProperty(e.parentElement.parentElement.dataset.index,"isDone",!0)):(e.parentElement.parentElement.classList.remove("checked-li"),w.editSingleNoteProperty(e.parentElement.parentElement.dataset.index,"isDone",!1)),t.stopPropagation();break;case"note-li":e.classList.toggle("expanded");break;default:e.parentElement.classList.toggle("expanded")}}function b(){document.querySelectorAll(".list-container li").forEach((t=>{t.remove()}))}function y(t,n="Today"){let a;if(a="Today"===n?w.getNotesList().filter((t=>vt(Et(t.dueDate),"dd/MM/yyyy")===vt(new Date,"dd/MM/yyyy"))):w.getNotesList().filter((t=>t.category===n)),a.length)for(let n=0;n<a.length;n++){const i=document.createElement("li"),c=document.createElement("input"),l=document.createElement("label"),s=document.createElement("h3"),d=document.createElement("p"),A=document.createElement("h5"),u=document.createElement("div"),C=document.createElement("div"),m=document.createElement("div"),g=new Image,f=new Image,h=new Image;switch(g.src=e,f.src=r,h.src=o,c.setAttribute("type","checkbox"),i.dataset.index=n,s.textContent=a[n].title,c.checked=a[n].isDone,d.textContent=a[n].description,A.textContent=vt(Et(a[n].dueDate),"dd/MM/yyyy"),u.classList.add("flag-icon","icon"),C.classList.add("edit-icon","icon"),m.classList.add("delete-icon","icon"),g.classList.add("svg-icon"),f.classList.add("svg-icon"),h.classList.add("svg-icon"),i.classList.add("note-li"),c.classList.add("check-icon"),l.classList.add("checkbox-container"),a[n].isDone&&i.classList.add("checked-li"),a[n].priority){case 1:i.classList.add("low");break;case 2:i.classList.add("normal");break;case 3:i.classList.add("high")}u.append(g),C.append(f),m.append(h),i.addEventListener("click",v),l.append(c),i.append(l,s,A,u,C,m,d),t.append(i),x()}else{console.log("empty");const e=document.createElement("li"),n=document.createElement("p");e.innerText="Nothing to see here, yet.",n.innerText="Press the button on the bottom-right corner to add a task.",e.append(n),e.classList.add("message-li"),t.append(e)}}function x(){const t=document.querySelectorAll("img.svg-icon");B()(t)}document.body.append(function(){const e=document.createElement("header"),r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),c=document.createElement("h2"),l=document.createElement("p"),s=new Image;r.classList.add("ham");for(let t=0;t<3;t++){const t=document.createElement("div");r.append(t)}return c.classList.add("big-h-text"),l.classList.add("small-h-text"),a.classList.add("header-logo"),i.classList.add("header-img-container"),o.classList.add("header-text-container"),s.classList.add("svg-icon"),s.src=t,c.textContent="To-do",l.textContent="or not to do...",r.addEventListener("click",n),i.append(s),o.append(c,l),a.append(i,o),e.append(r,a),e}(),function(){const t=document.createElement("section");return t.append(function(){const t=document.createElement("div");return t.textContent="+",t.classList.add("add-button"),t.addEventListener("click",h),t}(),function(){const t=document.createElement("aside"),e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("a");e.append(function(){const t=document.createElement("ul"),e=document.createElement("li"),n=document.createElement("li"),r=document.createElement("li"),o=document.createElement("ul"),a=document.createElement("div"),i=new Image;i.src=c;const d=new Image;d.src=l;const A=new Image;A.src=s;const C=document.createElement("h6");return C.innerHTML=(new Date).toLocaleDateString().slice(0,2),o.classList.add("project-list"),i.classList.add("svg-icon"),d.classList.add("svg-icon"),A.classList.add("svg-icon"),a.classList.add("date-icon"),u(o),e.append(i,"Home"),r.append(A,"Projects",o),a.append(d,C),n.append(a,"Today"),n.addEventListener("click",m),e.addEventListener("click",g),t.classList.add("sidebar-li-container"),t.append(e,n,r),t}());const o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("div");return r.textContent="berserkwal",n.textContent="Designed and developed by",r.classList.add("website-button"),e.classList.add("sidebar-stuff"),n.classList.add("sidebar-footer"),o.classList.add("darkmode-label"),a.classList.add("darkmode-check"),i.classList.add("darkmode-switch"),r.setAttribute("href","https://berserkwal.github.io"),r.setAttribute("target","_blank"),a.setAttribute("type","checkbox"),o.append("Dark Mode",a,i),n.append(r),t.append(e,o,n),a.addEventListener("click",f),t}(),function(){const t=document.createElement("main"),e=document.createElement("h2"),n=document.createElement("ul");return e.textContent="Today",n.classList.add("list-container"),e.classList.add("page-head"),t.append(e,n),y(n),t}()),t}()),x(),function(){localStorage.getItem("theme")?"dark"===localStorage.getItem("theme")&&(document.querySelector(".darkmode-check").checked=!0,document.documentElement.classList.add("darkmode")):localStorage.setItem("theme","light"),window.innerWidth;let t=window.innerHeight/100;document.documentElement.style.setProperty("--vh",t),window.addEventListener("resize",(()=>{t=window.innerHeight/100,document.documentElement.style.setProperty("--vh",t)}))}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var e={208:(e,n,t)=>{"use strict";t.d(n,{A:()=>C});var r=t(354),o=t.n(r),a=t(314),i=t.n(a),c=t(417),l=t.n(c),s=new URL(t(156),t.b),d=new URL(t(981),t.b),A=new URL(t(217),t.b),u=new URL(t(265),t.b),m=i()(o());m.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Heebo:wght@100;200;300;400;500;600;700;800;900&display=swap);"]);var h=l()(s),g=l()(d),f=l()(A),p=l()(u);m.push([e.id,`:root {\n  --color-accent: #4f85cc;\n  --color-accent-highlight: #62a0f1;\n  --color-accent-transparent: #4f85cc2f;\n  --color-super-transparent: #0000000e;\n  --color-aside: #f1f1f1;\n  --color-white: #fff;\n  --color-text: #202020;\n  --color-dark: #202020;\n  --color-overlay: #20202069;\n  --color-text-light: #444444b0;\n  --color-background: #fff;\n  --color-grey: #d3d3d3;\n  --ff: Heebo, sans-serif;\n  --check-empty: url(${h});\n  --check-filled: url(${g});\n  --test: #7270e0;\n}\n\n:root.darkmode {\n  --color-accent: #88b0e6;\n  --color-accent-highlight: #9fc2f0;\n  --color-accent-transparent: #88b0e62f;\n  --color-super-transparent: #ffffff0e;\n  --color-aside: #2b2b2b;\n  --color-white: #fff;\n  --color-text: #e9e9e9;\n  --color-overlay: #cccccc69;\n  --color-dark: #202020;\n  --color-text-light: #cacacac2;\n  --color-background: #1f1f1f;\n  --color-grey: #d3d3d3;\n  --ff: Heebo, sans-serif;\n  --check-empty: url(${f});\n  --check-filled: url(${p});\n}\n\n*,\n*::after,\n*::before {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n::-webkit-scrollbar {\n  width: 0.4rem;\n  height: 0.4rem;\n}\n\n::-webkit-scrollbar-track {\n  background-color: var(--color-super-transparent);\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: #27272760;\n  background-color: var(--color-accent);\n  border-radius: 500vh;\n  transition: all 1.15s ease-in;\n  background-clip: padding-box;\n}\n\nbody {\n  background-color: var(--color-background);\n  color: var(--color-text);\n  font-family: var(--ff);\n  display: grid;\n  grid-template: auto 1fr/ 1fr;\n  height: calc(var(--vh) * 100px);\n  overflow: hidden;\n}\n\nheader {\n  background-color: var(--color-accent);\n  color: var(--color-white);\n  color: var(--color-white);\n  padding: 0.5rem 1.5rem;\n}\n\n.header-logo {\n  display: flex;\n  align-items: center;\n  gap: 0.6rem;\n}\n\n.header-img-container {\n  height: 23px;\n  width: 23px;\n}\n\n.header-text-container {\n  user-select: none;\n  display: flex;\n  align-items: baseline;\n  gap: 0.25rem;\n  line-height: 1;\n}\n\n.header-text-container h2 {\n  font-weight: 400;\n}\n\n.header-text-container h2 + * {\n  opacity: 0;\n  transition: opacity 0.5s ease;\n}\n\n.header-logo:hover .header-text-container h2 + * {\n  /* font-weight: 400; */\n  opacity: 1;\n}\n\n.header-img-container svg path {\n  fill: var(--color-white);\n  fill: var(--color-white);\n}\n\nsection {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: grid;\n  grid-template: 1fr / 300px 1fr;\n  overflow: hidden;\n}\n\naside {\n  /* position: absolute; */\n  height: 100%;\n  padding: 1rem 1rem 0.25rem;\n  background-color: var(--color-aside);\n  overflow: hidden;\n  display: grid;\n  grid-template: 1fr max-content max-content/ 1fr;\n  gap: 0.5rem;\n  overflow: hidden;\n  z-index: 2;\n}\n/* \nsection.reveal {\n\tgrid-template: 1fr / 300px 1fr;\n}\n\nsection.reveal aside {\n\tposition: relative;\n\tleft: 0;\n} */\n\n.sidebar-li-container {\n  display: grid;\n  flex-direction: column;\n  gap: 0rem;\n  user-select: none;\n  overflow: hidden;\n}\n\n.sidebar-li-container > * {\n  display: grid;\n  grid-template: 1fr / auto 1fr;\n  gap: 0 1rem;\n  align-items: center;\n  font-size: 1.2rem;\n  font-weight: 400;\n  padding: 0.25rem 1rem;\n}\n\n.sidebar-li-container > *:not(:last-child) {\n  cursor: pointer;\n}\n\n.sidebar-li-container > li:last-of-type {\n  height: 100%;\n  overflow-y: hidden;\n  grid-template: auto 1fr / auto 1fr;\n}\n\n.sidebar-li-container > li:last-of-type > ul {\n  grid-column: 1 / 3;\n  list-style: none;\n  margin-left: 2.5rem;\n  max-height: calc(var(--vh) * 50px);\n  overflow-y: auto;\n  overflow-x: hidden;\n  align-self: flex-start;\n}\n\n.sidebar-li-container > li:last-of-type > ul li {\n  padding: 0 0.5rem;\n  font-weight: 200;\n  font-size: 0.9rem;\n  cursor: pointer;\n  display: grid;\n  align-items: center;\n  gap: 0.25rem;\n  grid-template-columns: auto 1fr;\n}\n.sidebar-li-container > li:last-of-type > ul li:not(*:first-child) {\n  grid-template-columns: 1fr auto;\n}\n.sidebar-li-container > li:last-of-type ul li svg path {\n  fill: var(--color-text);\n}\n.sidebar-li-container > li:last-of-type ul li:hover > svg path {\n  fill: hsl(219, 100%, 74%);\n}\n\n.sidebar-li-container > li:last-of-type ul li div:hover path {\n  fill: rgb(231, 113, 113);\n}\n.sidebar-li-container > li:last-of-type > ul li svg {\n  height: 13px;\n  user-select: none;\n  opacity: 0.5;\n}\n.sidebar-li-container > li:last-of-type > ul li:hover {\n  background-color: var(--color-background);\n}\n\n.sidebar-li-container > *:not(:last-child):hover {\n  background-color: var(--color-background);\n}\n\n.sidebar-li-container > * svg {\n  display: block;\n  height: 18px;\n  width: auto;\n  pointer-events: none;\n}\n\n.date-icon {\n  position: relative;\n}\n\n.date-icon h6 {\n  position: absolute;\n  font-size: 0.65rem;\n  font-weight: 400;\n  top: 20%;\n  left: 50%;\n  transform: translateX(-50%);\n  color: #1dba23;\n}\n\n.sidebar-footer {\n  height: max-content;\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n  color: var(--color-white);\n  color: var(--color-white);\n  color: var(--color-text-light);\n  font-size: 0.9rem;\n}\n\n.website-button {\n  text-decoration: underline;\n  width: max-content;\n  color: var(--color-white);\n  color: var(--color-white);\n  transition: background 0.25s ease;\n}\n\n.website-button:hover {\n  text-decoration: underline;\n}\n\n.darkmode-label {\n  width: max-content;\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  cursor: pointer;\n  color: var(--color-text-light);\n  font-size: 0.9rem;\n}\n\n.darkmode-check {\n  display: none;\n}\n\n.darkmode-switch {\n  position: relative;\n  height: 1rem;\n  width: 2rem;\n  background: var(--color-white);\n  background: var(--color-white);\n  border-radius: 500vh;\n  box-shadow: inset 0 0 0 1px var(--color-grey);\n  overflow: hidden;\n  transition: background 0.4s ease;\n}\n\n.darkmode-switch::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: var(--color-white);\n  background-color: var(--color-white);\n  border-radius: 50%;\n  height: 1rem;\n  width: 1rem;\n  border: 2px solid var(--color-grey);\n  transition: transform 0.2s ease;\n}\n\n.darkmode-check:checked + .darkmode-switch {\n  background-color: var(--color-accent);\n}\n\n.darkmode-check:checked + .darkmode-switch::after {\n  transform: translateX(100%);\n}\n\nmain {\n  padding: 1rem 7rem 3rem;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  z-index: 0;\n}\n\nmain h2 {\n  font-weight: 400;\n  font-size: 2rem;\n  box-shadow: 0px 2px 0 0px var(--color-super-transparent);\n}\n\n.list-container {\n  display: grid;\n  list-style: none;\n  overflow-y: auto;\n  /* background-color: var(--color-grey); */\n}\n\n.list-container > li + li {\n  border-top: 1px solid var(--color-accent-transparent);\n}\n\n.list-container li {\n  padding: 0.5rem;\n}\n\n.add-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 1;\n  background-color: var(--color-accent);\n  color: var(--color-white);\n  color: var(--color-white);\n  position: absolute;\n  bottom: 2rem;\n  right: 2rem;\n  font-size: 3rem;\n  font-weight: 200;\n  height: 4rem;\n  width: 4rem;\n  border-radius: 50%;\n  user-select: none;\n  cursor: pointer;\n  transition: background 0.25s ease;\n  z-index: 1;\n}\n\n.add-button:hover {\n  background-color: var(--color-accent-highlight);\n}\n\n.list-container .note-li {\n  display: grid;\n  grid-template-columns: auto 1fr repeat(4, auto);\n  align-items: baseline;\n  gap: 0rem 1rem;\n  user-select: none;\n}\n\n.list-container li:hover {\n  background-color: var(--color-super-transparent);\n}\n\n.list-container li .icon {\n  cursor: pointer;\n  display: block;\n}\n\n.list-container li .icon:not(.flag-icon) path {\n  fill: var(--color-text);\n}\n.list-container li .icon:not(.flag-icon) {\n  visibility: hidden;\n}\n.list-container li:hover .icon:not(.flag-icon) {\n  visibility: visible;\n}\n\n.list-container li .checkbox-container {\n  background: center / cover var(--check-empty);\n  height: 12px;\n  width: 12px;\n  position: relative;\n  cursor: pointer;\n}\n\n.list-container li .checkbox-container:hover {\n  box-shadow: 0 0 0 1px var(--color-background),\n    0 0 0 2px var(--color-accent-transparent);\n}\n\n.list-container li.checked-li .checkbox-container {\n  background: center / cover var(--check-filled);\n}\n\n.check-icon {\n  pointer-events: none;\n  display: none;\n}\n\n.list-container li h3 {\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.list-container li.expanded h3 {\n  word-wrap: break-word;\n  word-break: break-all;\n  text-overflow: unset;\n}\n\n.list-container li h3,\n.list-container li p,\n.list-container li h5 {\n  font-weight: 300;\n}\n\n.list-container .note-li p {\n  /* max-width: 300px; */\n  transition: transform 0.25s ease, height 0s 0.25s;\n  transform-origin: top;\n  height: 0;\n  overflow: hidden;\n  word-wrap: break-word;\n  grid-column: 2 / 5;\n  transform: scaleY(0);\n}\n\n.message-li {\n  font-size: 1.3rem;\n  font-weight: 600;\n  display: grid;\n  text-align: center;\n  align-self: center;\n  justify-self: center;\n  color: var(--color-text);\n  opacity: 0.4;\n  user-select: none;\n}\n.list-container .message-li:hover {\n  background-color: transparent;\n}\n\n.message-li p {\n  font-size: 0.9rem;\n}\n\n.list-container li.expanded {\n  transition: all 0s ease;\n  background-color: var(--color-super-transparent);\n\n  gap: 1rem;\n}\n\n.list-container li.expanded p {\n  transition: transform 0.25s ease;\n  height: min-content;\n  transform: scaleY(1);\n  overflow: auto;\n}\n\n.list-container li svg {\n  height: 15px;\n  width: auto;\n  pointer-events: none;\n}\n\n.list-container li.checked-li > h3 {\n  text-decoration: line-through;\n}\n.list-container li.checked-li > * {\n  opacity: 0.5;\n}\n\n.list-container li .flag-icon {\n  position: relative;\n}\n.list-container li .flag-icon::after {\n  content: '';\n  height: 16px;\n  top: 1px;\n  left: 1px;\n  position: absolute;\n  width: 2px;\n  background-color: var(--color-text);\n}\n\n.list-container li.high .flag-icon path {\n  fill: rgb(231, 113, 113);\n}\n.list-container li.normal .flag-icon path {\n  fill: rgb(255, 208, 121);\n}\n.list-container li.low .flag-icon path {\n  fill: rgb(127, 255, 127);\n}\n\n.modal {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 5;\n}\n\n.modal-overlay {\n  background-color: var(--color-overlay);\n  /* opacity: 0.6; */\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  z-index: 1;\n}\n\n.modal form {\n  background-color: var(--color-background);\n  border: 1px solid var(--color-super-transparent);\n  z-index: 100;\n  display: grid;\n  padding: 2rem;\n  gap: 1rem;\n  grid-template: repeat(6, auto) / repeat(2, 1fr);\n  width: 300px;\n  color: var(--color-text);\n}\n.add-project-modal form {\n  background-color: var(--color-background);\n  z-index: 100;\n  display: grid;\n  padding: 2rem;\n  gap: 1rem;\n  grid-template: repeat(2, auto) / repeat(2, 1fr);\n  width: 300px;\n}\n\n.modal form *:not(label) {\n  outline: none;\n  border: none;\n  background-color: var(--color-background);\n  border-bottom: 1px solid var(--color-accent-transparent);\n  color: var(--color-text);\n}\n\n.modal form *:not(label, button):focus {\n  border-bottom: 1px solid var(--color-accent);\n  color: var(--color-text);\n}\n\n.modal form > *:not(.button) {\n  grid-column: 1 / 3;\n  font-size: 0.8rem;\n  outline: none;\n  font-family: var(--ff);\n}\n\n.modal form > label {\n  color: var(--color-text);\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n}\n\n.modal form input,\n.modal form textarea {\n  padding: 0.25rem 0.5rem;\n}\n\n.modal form .cancel-button {\n  display: inline-block;\n  /* width: max-content; */\n  background-color: transparent;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  color: var(--color-text);\n}\n\n.modal form .button {\n  text-align: center;\n  padding: 0.25rem 0.5rem;\n  font-size: 0.9rem;\n}\n\n.modal form .save-button {\n  background-color: var(--color-accent);\n  border: none;\n  outline: none;\n  cursor: pointer;\n  color: var(--color-background);\n  border-radius: 0;\n  font-family: var(--ff);\n}\n\n.modal form .cancel-button:hover {\n  background-color: var(--color-super-transparent);\n  text-decoration: underline;\n}\n.modal form .save-button:hover {\n  background-color: var(--color-accent-highlight);\n  text-decoration: underline;\n}\n\n@media screen and (max-width: 880px) {\n  header {\n    display: grid;\n    align-items: center;\n    grid-template-columns: auto 1fr;\n    gap: 1rem;\n  }\n  .ham {\n    padding: 0.2rem;\n    margin-left: -1rem;\n    display: grid;\n    gap: 0.4rem;\n    align-items: center;\n    height: max-content;\n    width: max-content;\n    cursor: pointer;\n  }\n  .ham > * {\n    height: 2px;\n    width: 1.5rem;\n    background-color: var(--color-white);\n    pointer-events: none;\n    transform-origin: left;\n    transition: transform 0.25s ease;\n  }\n\n  .ham.click > div:nth-of-type(2) {\n    opacity: 0;\n  }\n  .ham.click > div:nth-of-type(1) {\n    transform: rotate(45deg);\n  }\n  .ham.click > div:nth-of-type(3) {\n    transform: rotate(-45deg);\n  }\n\n  .add-button {\n    right: 0.5rem;\n    bottom: 0.5rem;\n    height: 3rem;\n    width: 3rem;\n    font-size: 3rem;\n  }\n\n  section {\n    grid-template: 1fr / 1fr;\n  }\n  section aside {\n    position: absolute;\n    left: -300px;\n    transition: transform 0.25s ease;\n  }\n  section.reveal aside {\n    position: absolute;\n    left: 0;\n  }\n  main {\n    padding: 1rem 1rem;\n  }\n\n  main li section.reveal {\n    grid-template: 1fr / 1fr;\n  }\n  .list-container li .icon:not(.flag-icon) {\n    visibility: visible;\n  }\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Heebo:wght@100;200;300;400;500;600;700;800;900&display=swap');\r\n\r\n:root {\r\n  --color-accent: #4f85cc;\r\n  --color-accent-highlight: #62a0f1;\r\n  --color-accent-transparent: #4f85cc2f;\r\n  --color-super-transparent: #0000000e;\r\n  --color-aside: #f1f1f1;\r\n  --color-white: #fff;\r\n  --color-text: #202020;\r\n  --color-dark: #202020;\r\n  --color-overlay: #20202069;\r\n  --color-text-light: #444444b0;\r\n  --color-background: #fff;\r\n  --color-grey: #d3d3d3;\r\n  --ff: Heebo, sans-serif;\r\n  --check-empty: url(./check-empty.svg);\r\n  --check-filled: url(./check-filled.svg);\r\n  --test: #7270e0;\r\n}\r\n\r\n:root.darkmode {\r\n  --color-accent: #88b0e6;\r\n  --color-accent-highlight: #9fc2f0;\r\n  --color-accent-transparent: #88b0e62f;\r\n  --color-super-transparent: #ffffff0e;\r\n  --color-aside: #2b2b2b;\r\n  --color-white: #fff;\r\n  --color-text: #e9e9e9;\r\n  --color-overlay: #cccccc69;\r\n  --color-dark: #202020;\r\n  --color-text-light: #cacacac2;\r\n  --color-background: #1f1f1f;\r\n  --color-grey: #d3d3d3;\r\n  --ff: Heebo, sans-serif;\r\n  --check-empty: url(./check-empty-dark.svg);\r\n  --check-filled: url(./check-filled-dark.svg);\r\n}\r\n\r\n*,\r\n*::after,\r\n*::before {\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n  width: 0.4rem;\r\n  height: 0.4rem;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  background-color: var(--color-super-transparent);\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background-color: #27272760;\r\n  background-color: var(--color-accent);\r\n  border-radius: 500vh;\r\n  transition: all 1.15s ease-in;\r\n  background-clip: padding-box;\r\n}\r\n\r\nbody {\r\n  background-color: var(--color-background);\r\n  color: var(--color-text);\r\n  font-family: var(--ff);\r\n  display: grid;\r\n  grid-template: auto 1fr/ 1fr;\r\n  height: calc(var(--vh) * 100px);\r\n  overflow: hidden;\r\n}\r\n\r\nheader {\r\n  background-color: var(--color-accent);\r\n  color: var(--color-white);\r\n  color: var(--color-white);\r\n  padding: 0.5rem 1.5rem;\r\n}\r\n\r\n.header-logo {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.6rem;\r\n}\r\n\r\n.header-img-container {\r\n  height: 23px;\r\n  width: 23px;\r\n}\r\n\r\n.header-text-container {\r\n  user-select: none;\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.25rem;\r\n  line-height: 1;\r\n}\r\n\r\n.header-text-container h2 {\r\n  font-weight: 400;\r\n}\r\n\r\n.header-text-container h2 + * {\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.header-logo:hover .header-text-container h2 + * {\r\n  /* font-weight: 400; */\r\n  opacity: 1;\r\n}\r\n\r\n.header-img-container svg path {\r\n  fill: var(--color-white);\r\n  fill: var(--color-white);\r\n}\r\n\r\nsection {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n  display: grid;\r\n  grid-template: 1fr / 300px 1fr;\r\n  overflow: hidden;\r\n}\r\n\r\naside {\r\n  /* position: absolute; */\r\n  height: 100%;\r\n  padding: 1rem 1rem 0.25rem;\r\n  background-color: var(--color-aside);\r\n  overflow: hidden;\r\n  display: grid;\r\n  grid-template: 1fr max-content max-content/ 1fr;\r\n  gap: 0.5rem;\r\n  overflow: hidden;\r\n  z-index: 2;\r\n}\r\n/* \r\nsection.reveal {\r\n\tgrid-template: 1fr / 300px 1fr;\r\n}\r\n\r\nsection.reveal aside {\r\n\tposition: relative;\r\n\tleft: 0;\r\n} */\r\n\r\n.sidebar-li-container {\r\n  display: grid;\r\n  flex-direction: column;\r\n  gap: 0rem;\r\n  user-select: none;\r\n  overflow: hidden;\r\n}\r\n\r\n.sidebar-li-container > * {\r\n  display: grid;\r\n  grid-template: 1fr / auto 1fr;\r\n  gap: 0 1rem;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  font-weight: 400;\r\n  padding: 0.25rem 1rem;\r\n}\r\n\r\n.sidebar-li-container > *:not(:last-child) {\r\n  cursor: pointer;\r\n}\r\n\r\n.sidebar-li-container > li:last-of-type {\r\n  height: 100%;\r\n  overflow-y: hidden;\r\n  grid-template: auto 1fr / auto 1fr;\r\n}\r\n\r\n.sidebar-li-container > li:last-of-type > ul {\r\n  grid-column: 1 / 3;\r\n  list-style: none;\r\n  margin-left: 2.5rem;\r\n  max-height: calc(var(--vh) * 50px);\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  align-self: flex-start;\r\n}\r\n\r\n.sidebar-li-container > li:last-of-type > ul li {\r\n  padding: 0 0.5rem;\r\n  font-weight: 200;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  display: grid;\r\n  align-items: center;\r\n  gap: 0.25rem;\r\n  grid-template-columns: auto 1fr;\r\n}\r\n.sidebar-li-container > li:last-of-type > ul li:not(*:first-child) {\r\n  grid-template-columns: 1fr auto;\r\n}\r\n.sidebar-li-container > li:last-of-type ul li svg path {\r\n  fill: var(--color-text);\r\n}\r\n.sidebar-li-container > li:last-of-type ul li:hover > svg path {\r\n  fill: hsl(219, 100%, 74%);\r\n}\r\n\r\n.sidebar-li-container > li:last-of-type ul li div:hover path {\r\n  fill: rgb(231, 113, 113);\r\n}\r\n.sidebar-li-container > li:last-of-type > ul li svg {\r\n  height: 13px;\r\n  user-select: none;\r\n  opacity: 0.5;\r\n}\r\n.sidebar-li-container > li:last-of-type > ul li:hover {\r\n  background-color: var(--color-background);\r\n}\r\n\r\n.sidebar-li-container > *:not(:last-child):hover {\r\n  background-color: var(--color-background);\r\n}\r\n\r\n.sidebar-li-container > * svg {\r\n  display: block;\r\n  height: 18px;\r\n  width: auto;\r\n  pointer-events: none;\r\n}\r\n\r\n.date-icon {\r\n  position: relative;\r\n}\r\n\r\n.date-icon h6 {\r\n  position: absolute;\r\n  font-size: 0.65rem;\r\n  font-weight: 400;\r\n  top: 20%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  color: #1dba23;\r\n}\r\n\r\n.sidebar-footer {\r\n  height: max-content;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.3rem;\r\n  color: var(--color-white);\r\n  color: var(--color-white);\r\n  color: var(--color-text-light);\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.website-button {\r\n  text-decoration: underline;\r\n  width: max-content;\r\n  color: var(--color-white);\r\n  color: var(--color-white);\r\n  transition: background 0.25s ease;\r\n}\r\n\r\n.website-button:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.darkmode-label {\r\n  width: max-content;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  color: var(--color-text-light);\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.darkmode-check {\r\n  display: none;\r\n}\r\n\r\n.darkmode-switch {\r\n  position: relative;\r\n  height: 1rem;\r\n  width: 2rem;\r\n  background: var(--color-white);\r\n  background: var(--color-white);\r\n  border-radius: 500vh;\r\n  box-shadow: inset 0 0 0 1px var(--color-grey);\r\n  overflow: hidden;\r\n  transition: background 0.4s ease;\r\n}\r\n\r\n.darkmode-switch::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: var(--color-white);\r\n  background-color: var(--color-white);\r\n  border-radius: 50%;\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border: 2px solid var(--color-grey);\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.darkmode-check:checked + .darkmode-switch {\r\n  background-color: var(--color-accent);\r\n}\r\n\r\n.darkmode-check:checked + .darkmode-switch::after {\r\n  transform: translateX(100%);\r\n}\r\n\r\nmain {\r\n  padding: 1rem 7rem 3rem;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  z-index: 0;\r\n}\r\n\r\nmain h2 {\r\n  font-weight: 400;\r\n  font-size: 2rem;\r\n  box-shadow: 0px 2px 0 0px var(--color-super-transparent);\r\n}\r\n\r\n.list-container {\r\n  display: grid;\r\n  list-style: none;\r\n  overflow-y: auto;\r\n  /* background-color: var(--color-grey); */\r\n}\r\n\r\n.list-container > li + li {\r\n  border-top: 1px solid var(--color-accent-transparent);\r\n}\r\n\r\n.list-container li {\r\n  padding: 0.5rem;\r\n}\r\n\r\n.add-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  line-height: 1;\r\n  background-color: var(--color-accent);\r\n  color: var(--color-white);\r\n  color: var(--color-white);\r\n  position: absolute;\r\n  bottom: 2rem;\r\n  right: 2rem;\r\n  font-size: 3rem;\r\n  font-weight: 200;\r\n  height: 4rem;\r\n  width: 4rem;\r\n  border-radius: 50%;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  transition: background 0.25s ease;\r\n  z-index: 1;\r\n}\r\n\r\n.add-button:hover {\r\n  background-color: var(--color-accent-highlight);\r\n}\r\n\r\n.list-container .note-li {\r\n  display: grid;\r\n  grid-template-columns: auto 1fr repeat(4, auto);\r\n  align-items: baseline;\r\n  gap: 0rem 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.list-container li:hover {\r\n  background-color: var(--color-super-transparent);\r\n}\r\n\r\n.list-container li .icon {\r\n  cursor: pointer;\r\n  display: block;\r\n}\r\n\r\n.list-container li .icon:not(.flag-icon) path {\r\n  fill: var(--color-text);\r\n}\r\n.list-container li .icon:not(.flag-icon) {\r\n  visibility: hidden;\r\n}\r\n.list-container li:hover .icon:not(.flag-icon) {\r\n  visibility: visible;\r\n}\r\n\r\n.list-container li .checkbox-container {\r\n  background: center / cover var(--check-empty);\r\n  height: 12px;\r\n  width: 12px;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.list-container li .checkbox-container:hover {\r\n  box-shadow: 0 0 0 1px var(--color-background),\r\n    0 0 0 2px var(--color-accent-transparent);\r\n}\r\n\r\n.list-container li.checked-li .checkbox-container {\r\n  background: center / cover var(--check-filled);\r\n}\r\n\r\n.check-icon {\r\n  pointer-events: none;\r\n  display: none;\r\n}\r\n\r\n.list-container li h3 {\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n\r\n.list-container li.expanded h3 {\r\n  word-wrap: break-word;\r\n  word-break: break-all;\r\n  text-overflow: unset;\r\n}\r\n\r\n.list-container li h3,\r\n.list-container li p,\r\n.list-container li h5 {\r\n  font-weight: 300;\r\n}\r\n\r\n.list-container .note-li p {\r\n  /* max-width: 300px; */\r\n  transition: transform 0.25s ease, height 0s 0.25s;\r\n  transform-origin: top;\r\n  height: 0;\r\n  overflow: hidden;\r\n  word-wrap: break-word;\r\n  grid-column: 2 / 5;\r\n  transform: scaleY(0);\r\n}\r\n\r\n.message-li {\r\n  font-size: 1.3rem;\r\n  font-weight: 600;\r\n  display: grid;\r\n  text-align: center;\r\n  align-self: center;\r\n  justify-self: center;\r\n  color: var(--color-text);\r\n  opacity: 0.4;\r\n  user-select: none;\r\n}\r\n.list-container .message-li:hover {\r\n  background-color: transparent;\r\n}\r\n\r\n.message-li p {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.list-container li.expanded {\r\n  transition: all 0s ease;\r\n  background-color: var(--color-super-transparent);\r\n\r\n  gap: 1rem;\r\n}\r\n\r\n.list-container li.expanded p {\r\n  transition: transform 0.25s ease;\r\n  height: min-content;\r\n  transform: scaleY(1);\r\n  overflow: auto;\r\n}\r\n\r\n.list-container li svg {\r\n  height: 15px;\r\n  width: auto;\r\n  pointer-events: none;\r\n}\r\n\r\n.list-container li.checked-li > h3 {\r\n  text-decoration: line-through;\r\n}\r\n.list-container li.checked-li > * {\r\n  opacity: 0.5;\r\n}\r\n\r\n.list-container li .flag-icon {\r\n  position: relative;\r\n}\r\n.list-container li .flag-icon::after {\r\n  content: '';\r\n  height: 16px;\r\n  top: 1px;\r\n  left: 1px;\r\n  position: absolute;\r\n  width: 2px;\r\n  background-color: var(--color-text);\r\n}\r\n\r\n.list-container li.high .flag-icon path {\r\n  fill: rgb(231, 113, 113);\r\n}\r\n.list-container li.normal .flag-icon path {\r\n  fill: rgb(255, 208, 121);\r\n}\r\n.list-container li.low .flag-icon path {\r\n  fill: rgb(127, 255, 127);\r\n}\r\n\r\n.modal {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 5;\r\n}\r\n\r\n.modal-overlay {\r\n  background-color: var(--color-overlay);\r\n  /* opacity: 0.6; */\r\n  height: 100%;\r\n  width: 100%;\r\n  position: absolute;\r\n  z-index: 1;\r\n}\r\n\r\n.modal form {\r\n  background-color: var(--color-background);\r\n  border: 1px solid var(--color-super-transparent);\r\n  z-index: 100;\r\n  display: grid;\r\n  padding: 2rem;\r\n  gap: 1rem;\r\n  grid-template: repeat(6, auto) / repeat(2, 1fr);\r\n  width: 300px;\r\n  color: var(--color-text);\r\n}\r\n.add-project-modal form {\r\n  background-color: var(--color-background);\r\n  z-index: 100;\r\n  display: grid;\r\n  padding: 2rem;\r\n  gap: 1rem;\r\n  grid-template: repeat(2, auto) / repeat(2, 1fr);\r\n  width: 300px;\r\n}\r\n\r\n.modal form *:not(label) {\r\n  outline: none;\r\n  border: none;\r\n  background-color: var(--color-background);\r\n  border-bottom: 1px solid var(--color-accent-transparent);\r\n  color: var(--color-text);\r\n}\r\n\r\n.modal form *:not(label, button):focus {\r\n  border-bottom: 1px solid var(--color-accent);\r\n  color: var(--color-text);\r\n}\r\n\r\n.modal form > *:not(.button) {\r\n  grid-column: 1 / 3;\r\n  font-size: 0.8rem;\r\n  outline: none;\r\n  font-family: var(--ff);\r\n}\r\n\r\n.modal form > label {\r\n  color: var(--color-text);\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  align-items: center;\r\n}\r\n\r\n.modal form input,\r\n.modal form textarea {\r\n  padding: 0.25rem 0.5rem;\r\n}\r\n\r\n.modal form .cancel-button {\r\n  display: inline-block;\r\n  /* width: max-content; */\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  color: var(--color-text);\r\n}\r\n\r\n.modal form .button {\r\n  text-align: center;\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.modal form .save-button {\r\n  background-color: var(--color-accent);\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  color: var(--color-background);\r\n  border-radius: 0;\r\n  font-family: var(--ff);\r\n}\r\n\r\n.modal form .cancel-button:hover {\r\n  background-color: var(--color-super-transparent);\r\n  text-decoration: underline;\r\n}\r\n.modal form .save-button:hover {\r\n  background-color: var(--color-accent-highlight);\r\n  text-decoration: underline;\r\n}\r\n\r\n@media screen and (max-width: 880px) {\r\n  header {\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: auto 1fr;\r\n    gap: 1rem;\r\n  }\r\n  .ham {\r\n    padding: 0.2rem;\r\n    margin-left: -1rem;\r\n    display: grid;\r\n    gap: 0.4rem;\r\n    align-items: center;\r\n    height: max-content;\r\n    width: max-content;\r\n    cursor: pointer;\r\n  }\r\n  .ham > * {\r\n    height: 2px;\r\n    width: 1.5rem;\r\n    background-color: var(--color-white);\r\n    pointer-events: none;\r\n    transform-origin: left;\r\n    transition: transform 0.25s ease;\r\n  }\r\n\r\n  .ham.click > div:nth-of-type(2) {\r\n    opacity: 0;\r\n  }\r\n  .ham.click > div:nth-of-type(1) {\r\n    transform: rotate(45deg);\r\n  }\r\n  .ham.click > div:nth-of-type(3) {\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  .add-button {\r\n    right: 0.5rem;\r\n    bottom: 0.5rem;\r\n    height: 3rem;\r\n    width: 3rem;\r\n    font-size: 3rem;\r\n  }\r\n\r\n  section {\r\n    grid-template: 1fr / 1fr;\r\n  }\r\n  section aside {\r\n    position: absolute;\r\n    left: -300px;\r\n    transition: transform 0.25s ease;\r\n  }\r\n  section.reveal aside {\r\n    position: absolute;\r\n    left: 0;\r\n  }\r\n  main {\r\n    padding: 1rem 1rem;\r\n  }\r\n\r\n  main li section.reveal {\r\n    grid-template: 1fr / 1fr;\r\n  }\r\n  .list-container li .icon:not(.flag-icon) {\r\n    visibility: visible;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const C=m},314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},417:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},72:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=r.base?l[0]+r.base:l[0],d=a[s]||0,A="".concat(s," ").concat(d);a[s]=d+1;var u=t(A),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var h=o(m,r);r.byIndex=c,n.splice(c,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var l=r(e,o),s=0;s<a.length;s++){var d=t(a[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},671:(e,n,t)=>{var r;!function(o,a){"use strict";var i="file:"===o.location.protocol,c=a.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1"),l=Array.prototype.forEach||function(e,n){if(null==this||"function"!=typeof e)throw new TypeError;var t,r=this.length>>>0;for(t=0;t<r;++t)t in this&&e.call(n,this[t],t,this)},s={},d=0,A=[],u=[],m={},h=function(e){return e.cloneNode(!0)},g=function(e,n){u[e]=u[e]||[],u[e].push(n)},f=function(e,n,t,r){var a=e.getAttribute("data-src")||e.getAttribute("src");if(/\.svg/i.test(a))if(c)-1===A.indexOf(e)&&(A.push(e),e.setAttribute("src",""),function(e,n){if(void 0!==s[e])s[e]instanceof SVGSVGElement?n(h(s[e])):g(e,n);else{if(!o.XMLHttpRequest)return n("Browser does not support XMLHttpRequest"),!1;s[e]={},g(e,n);var t=new XMLHttpRequest;t.onreadystatechange=function(){if(4===t.readyState){if(404===t.status||null===t.responseXML)return n("Unable to load SVG file: "+e),i&&n("Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver."),n(),!1;if(!(200===t.status||i&&0===t.status))return n("There was a problem injecting the SVG: "+t.status+" "+t.statusText),!1;if(t.responseXML instanceof Document)s[e]=t.responseXML.documentElement;else if(DOMParser&&DOMParser instanceof Function){var r;try{r=(new DOMParser).parseFromString(t.responseText,"text/xml")}catch(e){r=void 0}if(!r||r.getElementsByTagName("parsererror").length)return n("Unable to parse SVG file: "+e),!1;s[e]=r.documentElement}!function(e){for(var n=0,t=u[e].length;n<t;n++)!function(n){setTimeout((function(){u[e][n](h(s[e]))}),0)}(n)}(e)}},t.open("GET",e),t.overrideMimeType&&t.overrideMimeType("text/xml"),t.send()}}(a,(function(t){if(void 0===t||"string"==typeof t)return r(t),!1;var i=e.getAttribute("id");i&&t.setAttribute("id",i);var c=e.getAttribute("title");c&&t.setAttribute("title",c);var s=[].concat(t.getAttribute("class")||[],"injected-svg",e.getAttribute("class")||[]).join(" ");t.setAttribute("class",function(e){for(var n={},t=(e=e.split(" ")).length,r=[];t--;)n.hasOwnProperty(e[t])||(n[e[t]]=1,r.unshift(e[t]));return r.join(" ")}(s));var u=e.getAttribute("style");u&&t.setAttribute("style",u);var h=[].filter.call(e.attributes,(function(e){return/^data-\w[\w\-]*$/.test(e.name)}));l.call(h,(function(e){e.name&&e.value&&t.setAttribute(e.name,e.value)}));var g,f,p,C,E,b={clipPath:["clip-path"],"color-profile":["color-profile"],cursor:["cursor"],filter:["filter"],linearGradient:["fill","stroke"],marker:["marker","marker-start","marker-mid","marker-end"],mask:["mask"],pattern:["fill","stroke"],radialGradient:["fill","stroke"]};Object.keys(b).forEach((function(e){g=e,p=b[e];for(var n=0,r=(f=t.querySelectorAll("defs "+g+"[id]")).length;n<r;n++){var o;C=f[n].id,E=C+"-"+d,l.call(p,(function(e){for(var n=0,r=(o=t.querySelectorAll("["+e+'*="'+C+'"]')).length;n<r;n++)o[n].setAttribute(e,"url(#"+E+")")})),f[n].id=E}})),t.removeAttribute("xmlns:a");for(var B,v,w=t.querySelectorAll("script"),y=[],k=0,x=w.length;k<x;k++)(v=w[k].getAttribute("type"))&&"application/ecmascript"!==v&&"application/javascript"!==v||(B=w[k].innerText||w[k].textContent,y.push(B),t.removeChild(w[k]));if(y.length>0&&("always"===n||"once"===n&&!m[a])){for(var S=0,L=y.length;S<L;S++)new Function(y[S])(o);m[a]=!0}var D=t.querySelectorAll("style");l.call(D,(function(e){e.textContent+=""})),e.parentNode.replaceChild(t,e),delete A[A.indexOf(e)],e=null,d++,r(t)})));else{var f=e.getAttribute("data-fallback")||e.getAttribute("data-png");f?(e.setAttribute("src",f),r(null)):t?(e.setAttribute("src",t+"/"+a.split("/").pop().replace(".svg",".png")),r(null)):r("This browser does not support SVG and no PNG fallback was defined.")}else r("Attempted to inject a file with a non-svg extension: "+a)},p=function(e,n,t){var r=(n=n||{}).evalScripts||"always",o=n.pngFallback||!1,a=n.each;if(void 0!==e.length){var i=0;l.call(e,(function(n){f(n,r,o,(function(n){a&&"function"==typeof a&&a(n),t&&e.length===++i&&t(i)}))}))}else e?f(e,r,o,(function(n){a&&"function"==typeof a&&a(n),t&&t(1),e=null})):t&&t(0)};"object"==typeof e.exports?e.exports=n=p:void 0===(r=function(){return p}.call(n,t,n,e))||(e.exports=r)}(window,document)},217:(e,n,t)=>{"use strict";e.exports=t.p+"0347aa3ad7e10815c1d8.svg"},156:(e,n,t)=>{"use strict";e.exports=t.p+"8919e66b4570e33b8b93.svg"},265:(e,n,t)=>{"use strict";e.exports=t.p+"0b2b514fa93c01a14653.svg"},981:(e,n,t)=>{"use strict";e.exports=t.p+"9cef2a5df753bef9310d.svg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{"use strict";const e=t.p+"89918ce1a38730c91d9b.svg",n=t.p+"d3d59b1b655516e6d0f7.svg",r=t.p+"96ee3277aeab380f280a.svg",o=t.p+"156c9cc0902a7b8b9950.svg",a=t.p+"a1a8f9a430b30331a432.svg",i=t.p+"b17fc151d5709d95e62d.svg",c=t.p+"07b1fe33c1565956cdf5.svg",l=t.p+"411fe105bab34915e91d.svg",s=t.p+"f4bae49efb3486a48ad8.svg";var d=t(72),A=t.n(d),u=t(825),m=t.n(u),h=t(659),g=t.n(h),f=t(56),p=t.n(f),C=t(540),E=t.n(C),b=t(113),B=t.n(b),v=t(208),w={};w.styleTagTransform=B(),w.setAttributes=p(),w.insert=g().bind(null,"head"),w.domAPI=m(),w.insertStyleElement=E(),A()(v.A,w),v.A&&v.A.locals&&v.A.locals;var y=t(671),k=t.n(y);const x=function(){let e=[],n=["Home"];return localStorage.getItem("projectList")&&(n=JSON.parse(localStorage.getItem("projectList"))),localStorage.getItem("notesList")&&(e=JSON.parse(localStorage.getItem("notesList"))),{getNotesList:function(){return[...e]},setNotes:function(...n){const t=function(n,t,r,o,a,i){return{title:n,description:t,dueDate:r,priority:o,isDone:a,category:i,index:e.length}}(...n);e.push(t),localStorage.setItem("notesList",JSON.stringify(e))},removeNote:function(n){if(n<e.length-1)for(let t=n-1;t>=0;t--)e[t].index=e[t].index-1;e.splice(n,1),localStorage.setItem("notesList",JSON.stringify(e))},getProjectList:function(){return[...n]},setProject:function(e){n.push(e),localStorage.setItem("projectList",JSON.stringify(n))},removeProject:function(e){n.splice(e,1),localStorage.setItem("projectList",JSON.stringify(n))},editSingleNoteProperty:function(n,t,r){e[n][t]=r,localStorage.setItem("notesList",JSON.stringify(e))}}}(),S={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function L(e){return(n={})=>{const t=n.width?String(n.width):e.defaultWidth;return e.formats[t]||e.formats[e.defaultWidth]}}const D={date:L({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:L({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:L({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},M={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function P(e){return(n,t)=>{let r;if("formatting"===(t?.context?String(t.context):"standalone")&&e.formattingValues){const n=e.defaultFormattingWidth||e.defaultWidth,o=t?.width?String(t.width):n;r=e.formattingValues[o]||e.formattingValues[n]}else{const n=e.defaultWidth,o=t?.width?String(t.width):e.defaultWidth;r=e.values[o]||e.values[n]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const q={ordinalNumber:(e,n)=>{const t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:P({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:P({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:P({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:P({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:P({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function T(e){return(n,t={})=>{const r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=n.match(o);if(!a)return null;const i=a[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(c)?function(e){for(let n=0;n<e.length;n++)if(e[n].test(i))return n}(c):function(e){for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&e[n].test(i))return n}(c);let s;return s=e.valueCallback?e.valueCallback(l):l,s=t.valueCallback?t.valueCallback(s):s,{value:s,rest:n.slice(i.length)}}}const j={ordinalNumber:(N={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,n={})=>{const t=e.match(N.matchPattern);if(!t)return null;const r=t[0],o=e.match(N.parsePattern);if(!o)return null;let a=N.valueCallback?N.valueCallback(o[0]):o[0];return a=n.valueCallback?n.valueCallback(a):a,{value:a,rest:e.slice(r.length)}}),era:T({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:T({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:T({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:T({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:T({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var N;const Y={code:"en-US",formatDistance:(e,n,t)=>{let r;const o=S[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),t?.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:D,formatRelative:(e,n,t,r)=>M[e],localize:q,match:j,options:{weekStartsOn:0,firstWeekContainsDate:1}};let W={};function z(){return W}Math.pow(10,8);const I=6048e5,H=36e5,O=Symbol.for("constructDateFrom");function U(e,n){return"function"==typeof e?e(n):e&&"object"==typeof e&&O in e?e[O](n):e instanceof Date?new e.constructor(n):new Date(n)}function X(e,n){return U(n||e,e)}function F(e){const n=X(e),t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),+e-+t}function Z(e,n){const t=X(e,n?.in);return t.setHours(0,0,0,0),t}function G(e,n){const t=X(e,n?.in);return function(e,n,t){const[r,o]=function(e,...n){const t=U.bind(null,e||n.find((e=>"object"==typeof e)));return n.map(t)}(t?.in,e,n),a=Z(r),i=Z(o),c=+a-F(a),l=+i-F(i);return Math.round((c-l)/864e5)}(t,function(e,n){const t=X(e,n?.in);return t.setFullYear(t.getFullYear(),0,1),t.setHours(0,0,0,0),t}(t))+1}function Q(e,n){const t=z(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??t.weekStartsOn??t.locale?.options?.weekStartsOn??0,o=X(e,n?.in),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function $(e,n){return Q(e,{...n,weekStartsOn:1})}function R(e,n){const t=X(e,n?.in),r=t.getFullYear(),o=U(t,0);o.setFullYear(r+1,0,4),o.setHours(0,0,0,0);const a=$(o),i=U(t,0);i.setFullYear(r,0,4),i.setHours(0,0,0,0);const c=$(i);return t.getTime()>=a.getTime()?r+1:t.getTime()>=c.getTime()?r:r-1}function J(e,n){const t=X(e,n?.in),r=+$(t)-+function(e,n){const t=R(e,n),r=U(n?.in||e,0);return r.setFullYear(t,0,4),r.setHours(0,0,0,0),$(r)}(t);return Math.round(r/I)+1}function V(e,n){const t=X(e,n?.in),r=t.getFullYear(),o=z(),a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=U(n?.in||e,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const c=Q(i,n),l=U(n?.in||e,0);l.setFullYear(r,0,a),l.setHours(0,0,0,0);const s=Q(l,n);return+t>=+c?r+1:+t>=+s?r:r-1}function _(e,n){const t=X(e,n?.in),r=+Q(t,n)-+function(e,n){const t=z(),r=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??t.firstWeekContainsDate??t.locale?.options?.firstWeekContainsDate??1,o=V(e,n),a=U(n?.in||e,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),Q(a,n)}(t,n);return Math.round(r/I)+1}function K(e,n){return(e<0?"-":"")+Math.abs(e).toString().padStart(n,"0")}const ee={y(e,n){const t=e.getFullYear(),r=t>0?t:1-t;return K("yy"===n?r%100:r,n.length)},M(e,n){const t=e.getMonth();return"M"===n?String(t+1):K(t+1,2)},d:(e,n)=>K(e.getDate(),n.length),a(e,n){const t=e.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:(e,n)=>K(e.getHours()%12||12,n.length),H:(e,n)=>K(e.getHours(),n.length),m:(e,n)=>K(e.getMinutes(),n.length),s:(e,n)=>K(e.getSeconds(),n.length),S(e,n){const t=n.length,r=e.getMilliseconds();return K(Math.trunc(r*Math.pow(10,t-3)),n.length)}},ne={G:function(e,n,t){const r=e.getFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){const n=e.getFullYear(),r=n>0?n:1-n;return t.ordinalNumber(r,{unit:"year"})}return ee.y(e,n)},Y:function(e,n,t,r){const o=V(e,r),a=o>0?o:1-o;return"YY"===n?K(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):K(a,n.length)},R:function(e,n){return K(R(e),n.length)},u:function(e,n){return K(e.getFullYear(),n.length)},Q:function(e,n,t){const r=Math.ceil((e.getMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return K(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){const r=Math.ceil((e.getMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return K(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){const r=e.getMonth();switch(n){case"M":case"MM":return ee.M(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){const r=e.getMonth();switch(n){case"L":return String(r+1);case"LL":return K(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){const o=_(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):K(o,n.length)},I:function(e,n,t){const r=J(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):K(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getDate(),{unit:"date"}):ee.d(e,n)},D:function(e,n,t){const r=G(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):K(r,n.length)},E:function(e,n,t){const r=e.getDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){const o=e.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return K(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){const o=e.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return K(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){const r=e.getDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return K(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){const r=e.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){const r=e.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,n,t){const r=e.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){let n=e.getHours()%12;return 0===n&&(n=12),t.ordinalNumber(n,{unit:"hour"})}return ee.h(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getHours(),{unit:"hour"}):ee.H(e,n)},K:function(e,n,t){const r=e.getHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):K(r,n.length)},k:function(e,n,t){let r=e.getHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):K(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getMinutes(),{unit:"minute"}):ee.m(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getSeconds(),{unit:"second"}):ee.s(e,n)},S:function(e,n){return ee.S(e,n)},X:function(e,n,t){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(n){case"X":return re(r);case"XXXX":case"XX":return oe(r);default:return oe(r,":")}},x:function(e,n,t){const r=e.getTimezoneOffset();switch(n){case"x":return re(r);case"xxxx":case"xx":return oe(r);default:return oe(r,":")}},O:function(e,n,t){const r=e.getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+te(r,":");default:return"GMT"+oe(r,":")}},z:function(e,n,t){const r=e.getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+te(r,":");default:return"GMT"+oe(r,":")}},t:function(e,n,t){return K(Math.trunc(+e/1e3),n.length)},T:function(e,n,t){return K(+e,n.length)}};function te(e,n=""){const t=e>0?"-":"+",r=Math.abs(e),o=Math.trunc(r/60),a=r%60;return 0===a?t+String(o):t+String(o)+n+K(a,2)}function re(e,n){return e%60==0?(e>0?"-":"+")+K(Math.abs(e)/60,2):oe(e,n)}function oe(e,n=""){const t=e>0?"-":"+",r=Math.abs(e);return t+K(Math.trunc(r/60),2)+n+K(r%60,2)}const ae=(e,n)=>{switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},ie=(e,n)=>{switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},ce={p:ie,P:(e,n)=>{const t=e.match(/(P+)(p+)?/)||[],r=t[1],o=t[2];if(!o)return ae(e,n);let a;switch(r){case"P":a=n.dateTime({width:"short"});break;case"PP":a=n.dateTime({width:"medium"});break;case"PPP":a=n.dateTime({width:"long"});break;default:a=n.dateTime({width:"full"})}return a.replace("{{date}}",ae(r,n)).replace("{{time}}",ie(o,n))}},le=/^D+$/,se=/^Y+$/,de=["D","DD","YY","YYYY"];function Ae(e){return!(!((n=e)instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n))&&"number"!=typeof e||isNaN(+X(e)));var n}const ue=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,me=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,he=/^'([^]*?)'?$/,ge=/''/g,fe=/[a-zA-Z]/;function pe(e){const n=e.match(he);return n?n[1].replace(ge,"'"):e}const Ce=function(e,n,t){const r=z(),o=t?.locale??r.locale??Y,a=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,c=X(e,t?.in);if(!Ae(c))throw new RangeError("Invalid time value");let l=n.match(me).map((e=>{const n=e[0];return"p"===n||"P"===n?(0,ce[n])(e,o.formatLong):e})).join("").match(ue).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const n=e[0];if("'"===n)return{isToken:!1,value:pe(e)};if(ne[n])return{isToken:!0,value:e};if(n.match(fe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return{isToken:!1,value:e}}));o.localize.preprocessor&&(l=o.localize.preprocessor(c,l));const s={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return l.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!t?.useAdditionalWeekYearTokens&&function(e){return se.test(e)}(a)||!t?.useAdditionalDayOfYearTokens&&function(e){return le.test(e)}(a))&&function(e,n,t){const r=function(e,n,t){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${n}\`) for formatting ${r} to the input \`${t}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,n,t);if(console.warn(r),de.includes(e))throw new RangeError(r)}(a,n,String(e)),(0,ne[a[0]])(c,a,o.localize,s)})).join("")},Ee={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},be=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Be=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ve=/^([+-])(\d{2})(?::?(\d{2}))?$/;function we(e){return e?parseInt(e):1}function ye(e){return e&&parseFloat(e.replace(",","."))||0}const ke=[31,null,31,30,31,30,31,31,30,31,30,31];function xe(e){return e%400==0||e%4==0&&e%100!=0}const Se=function(e,n){const t=()=>U(n?.in,NaN),r=n?.additionalDigits??2,o=function(e){const n={},t=e.split(Ee.dateTimeDelimiter);let r;if(t.length>2)return n;if(/:/.test(t[0])?r=t[0]:(n.date=t[0],r=t[1],Ee.timeZoneDelimiter.test(n.date)&&(n.date=e.split(Ee.timeZoneDelimiter)[0],r=e.substr(n.date.length,e.length))),r){const e=Ee.timezone.exec(r);e?(n.time=r.replace(e[1],""),n.timezone=e[1]):n.time=r}return n}(e);let a;if(o.date){const e=function(e,n){const t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};const o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(o.date,r);a=function(e,n){if(null===n)return new Date(NaN);const t=e.match(be);if(!t)return new Date(NaN);const r=!!t[4],o=we(t[1]),a=we(t[2])-1,i=we(t[3]),c=we(t[4]),l=we(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,c,l)?function(e,n,t){const r=new Date(0);r.setUTCFullYear(e,0,4);const o=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(n,c,l):new Date(NaN);{const e=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(ke[n]||(xe(e)?29:28))}(n,a,i)&&function(e,n){return n>=1&&n<=(xe(e)?366:365)}(n,o)?(e.setUTCFullYear(n,a,Math.max(o,i)),e):new Date(NaN)}}(e.restDateString,e.year)}if(!a||isNaN(+a))return t();const i=+a;let c,l=0;if(o.time&&(l=function(e){const n=e.match(Be);if(!n)return NaN;const t=ye(n[1]),r=ye(n[2]),o=ye(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,o)?t*H+6e4*r+1e3*o:NaN}(o.time),isNaN(l)))return t();if(!o.timezone){const e=new Date(i+l),t=X(0,n?.in);return t.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),t.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),t}return c=function(e){if("Z"===e)return 0;const n=e.match(ve);if(!n)return 0;const t="+"===n[1]?-1:1,r=parseInt(n[2]),o=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,o)?t*(r*H+6e4*o):NaN}(o.timezone),isNaN(c)?t():X(i+l+c,n?.in)};!function(){function t(e){e.target.classList.contains("click")?(e.target.classList.remove("click"),document.querySelector("section").classList.remove("reveal")):(e.target.classList.add("click"),document.querySelector("section").classList.add("reveal"))}function d(){document.querySelectorAll(".project-list li").forEach((e=>e.remove()))}function A(){!function(){const e=document.createElement("div"),n=document.createElement("div"),t=document.createElement("form"),r=document.createElement("input"),o=document.createElement("button"),a=document.createElement("div");r.setAttribute("placeholder","Project Name"),r.required=!0,o.textContent="Save",a.textContent="Cancel",n.classList.add("modal-overlay"),e.classList.add("modal"),e.classList.add("add-project-modal"),a.classList.add("button"),o.classList.add("button"),o.classList.add("save-button"),a.classList.add("cancel-button"),o.addEventListener("click",(n=>{r.value&&(x.getProjectList().includes(r.value)||(x.setProject(r.value),e.remove(),d(),u(document.querySelector(".project-list")),v(),n.preventDefault()))})),a.addEventListener("click",(n=>{e.remove(),n.preventDefault()})),t.append(r,a,o),e.append(n,t),document.body.append(e),r.focus()}()}function u(e){const n=document.createElement("li"),t=new Image;t.src=i,t.classList.add("svg-icon"),n.classList.add(".add-new-project"),n.addEventListener("click",A),n.append(t,"Add new project"),e.append(n);for(let n=1;n<x.getProjectList().length;n++){const t=document.createElement("li"),r=document.createElement("div"),o=new Image;o.src=a,o.classList.add("svg-icon"),t.innerText=x.getProjectList()[n],t.addEventListener("click",C),t.dataset.index=n,r.append(o),r.addEventListener("click",m),t.append(r),e.append(t)}}function m(e){const n=document.querySelector(".page-head"),t=[];for(let n=0;n<x.getNotesList().length;n++)x.getNotesList()[n].category===e.target.parentElement.innerText&&t.push(n);t.forEach((e=>{x.editSingleNoteProperty(e,"category","Home")})),x.removeProject(e.target.parentElement.dataset.index),d(),b(),e.target.parentElement.innerText===n.innerText?(n.innerText="Home",B(document.querySelector(".list-container"),"Home")):B(document.querySelector(".list-container"),n.innerText),u(document.querySelector(".project-list")),v(),e.stopPropagation()}function h(){b(),B(document.querySelector(".list-container")),document.querySelector(".page-head").textContent="Today"}function g(){b(),B(document.querySelector(".list-container"),"Home"),document.querySelector(".page-head").textContent="Home"}function f(e){e.target.checked?(document.documentElement.classList.add("darkmode"),localStorage.setItem("theme","dark")):(document.documentElement.classList.remove("darkmode"),localStorage.setItem("theme","light"))}function p(){!function(){const e=["Low Priority","Normal Priority","High Priority"],n=document.createElement("div"),t=document.createElement("div"),r=document.createElement("form"),o=document.createElement("input"),a=document.createElement("textarea"),i=document.createElement("label"),c=document.createElement("select"),l=document.createElement("label"),s=document.createElement("label"),d=document.createElement("select"),A=document.createElement("input"),u=document.createElement("button"),m=document.createElement("div"),h=document.querySelector(".page-head").textContent;o.setAttribute("placeholder","Title"),o.required=!0,a.required=!0,A.required=!0,a.setAttribute("placeholder","Description..."),a.setAttribute("rows","4"),A.setAttribute("type","date"),u.textContent="Save",m.textContent="Cancel",i.textContent="Set Priority:",l.textContent="Set Category:";for(let n=0;n<3;n++){const t=document.createElement("option");t.value=n+1,t.textContent=e[n],n+1===2&&t.setAttribute("selected","selected"),c.append(t)}for(let e=0;e<x.getProjectList().length;e++){const n=document.createElement("option");n.value=x.getProjectList()[e],n.textContent="Home"===x.getProjectList()[e]?"Default":x.getProjectList()[e];const t=document.querySelector(".page-head").textContent;"Home"===t&&"Today"===t||x.getProjectList()[e]===t&&n.setAttribute("selected","selected"),d.append(n)}t.classList.add("modal-overlay"),n.classList.add("modal"),u.classList.add("save-button"),u.classList.add("button"),m.classList.add("cancel-button"),m.classList.add("button"),i.append(c),l.append(d),u.addEventListener("click",(e=>{o.value&&a.value&&A.value&&(x.setNotes(o.value,a.value,A.value,+c.value,!1,"null"===d?null:d.value),n.remove(),b(),B(document.querySelector(".list-container"),h),e.preventDefault())})),m.addEventListener("click",(e=>{n.remove(),e.preventDefault()})),s.append("Due Date:",A),r.append(o,a,s,i,l,m,u),n.append(t,r),document.body.append(n),o.focus()}()}function C(e){const n=document.querySelector(".list-container");b(),B(n,e.target.innerText),document.querySelector(".page-head").textContent=e.target.innerText}function E(e){const n=e.target,t=n.parentElement.dataset.index;switch(n.classList[0]){case"flag-icon":e.stopPropagation(),n.parentElement.classList.contains("high")?(x.editSingleNoteProperty(t,"priority",1),n.parentElement.classList.remove("high"),n.parentElement.classList.add("low")):n.parentElement.classList.contains("normal")?(x.editSingleNoteProperty(t,"priority",3),n.parentElement.classList.remove("normal"),n.parentElement.classList.add("high")):(n.parentElement.classList.remove("low"),x.editSingleNoteProperty(t,"priority",2),n.parentElement.classList.add("normal"));break;case"edit-icon":e.stopPropagation(),function(e){const n=["Low Priority","Normal Priority","High Priority"],t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("form"),a=document.createElement("input"),i=document.createElement("textarea"),c=document.createElement("label"),l=document.createElement("select"),s=document.createElement("label"),d=document.createElement("select"),A=document.createElement("input"),u=document.createElement("button"),m=document.createElement("div"),h=document.createElement("label"),g=document.querySelector(".page-head").textContent;a.required=!0,i.required=!0,A.required=!0,a.setAttribute("placeholder","Title"),i.setAttribute("placeholder","Description..."),i.setAttribute("rows","4"),A.setAttribute("type","date"),u.textContent="Save",m.textContent="Cancel",c.textContent="Set Priority:",s.textContent="Set Category:",a.value=x.getNotesList()[e].title,i.value=x.getNotesList()[e].description,A.defaultValue=x.getNotesList()[e].dueDate;for(let t=0;t<3;t++){const r=document.createElement("option");r.value=t+1,r.textContent=n[t],x.getNotesList()[e].priority===t+1&&r.setAttribute("selected","selected"),l.append(r)}for(let n=0;n<x.getProjectList().length;n++){const t=document.createElement("option");t.value=x.getProjectList()[n],t.textContent="Home"===x.getProjectList()[n]?"Default":x.getProjectList()[n],x.getNotesList()[e].category?x.getNotesList()[e].category===x.getProjectList()[n]&&t.setAttribute("selected","selected"):"null"===t.value&&t.setAttribute("selected","selected"),d.append(t)}r.classList.add("modal-overlay"),t.classList.add("modal"),u.classList.add("save-button"),m.classList.add("cancel-button"),m.classList.add("button"),u.classList.add("button"),c.append(l),s.append(d),u.addEventListener("click",(n=>{a.value&&i.value&&A.value&&(x.editSingleNoteProperty(e,"title",a.value),x.editSingleNoteProperty(e,"description",i.value),x.editSingleNoteProperty(e,"dueDate",A.value),x.editSingleNoteProperty(e,"priority",+l.value),x.editSingleNoteProperty(e,"category","null"===d.value?null:d.value),t.remove(),b(),B(document.querySelector(".list-container"),g),n.preventDefault())})),m.addEventListener("click",(e=>{t.remove(),e.preventDefault()})),h.append("Due Date:",A),o.append(a,i,h,c,s,m,u),t.append(r,o),document.body.append(t),a.focus()}(t);break;case"delete-icon":x.removeNote(t),b(),B(document.querySelector(".list-container")),e.stopPropagation();break;case"checkbox-container":e.stopPropagation();break;case"check-icon":n.checked?(n.parentElement.parentElement.classList.add("checked-li"),x.editSingleNoteProperty(n.parentElement.parentElement.dataset.index,"isDone",!0)):(n.parentElement.parentElement.classList.remove("checked-li"),x.editSingleNoteProperty(n.parentElement.parentElement.dataset.index,"isDone",!1)),e.stopPropagation();break;case"note-li":n.classList.toggle("expanded");break;default:n.parentElement.classList.toggle("expanded")}}function b(){document.querySelectorAll(".list-container li").forEach((e=>{e.remove()}))}function B(e,t="Today"){let a;if(a="Today"===t?x.getNotesList().filter((e=>Ce(Se(e.dueDate),"dd/MM/yyyy")===Ce(new Date,"dd/MM/yyyy"))):x.getNotesList().filter((e=>e.category===t)),a.length)for(let t=0;t<a.length;t++){const i=document.createElement("li"),c=document.createElement("input"),l=document.createElement("label"),s=document.createElement("h3"),d=document.createElement("p"),A=document.createElement("h5"),u=document.createElement("div"),m=document.createElement("div"),h=document.createElement("div"),g=new Image,f=new Image,p=new Image;switch(g.src=n,f.src=r,p.src=o,c.setAttribute("type","checkbox"),i.dataset.index=a[t].index,s.textContent=a[t].title,c.checked=a[t].isDone,d.textContent=a[t].description,A.textContent=Ce(Se(a[t].dueDate),"dd/MM/yyyy"),u.classList.add("flag-icon","icon"),m.classList.add("edit-icon","icon"),h.classList.add("delete-icon","icon"),g.classList.add("svg-icon"),f.classList.add("svg-icon"),p.classList.add("svg-icon"),i.classList.add("note-li"),c.classList.add("check-icon"),l.classList.add("checkbox-container"),a[t].isDone&&i.classList.add("checked-li"),a[t].priority){case 1:i.classList.add("low");break;case 2:i.classList.add("normal");break;case 3:i.classList.add("high")}u.append(g),m.append(f),h.append(p),i.addEventListener("click",E),l.append(c),i.append(l,s,A,u,m,h,d),e.append(i),v()}else{const n=document.createElement("li"),r=document.createElement("p");n.innerText="Nothing to see here, yet.",r.innerText="Today"===t?"No tasks scheduled for today, check Home tab or any Project.":"Press the button on the bottom-right corner to add a task.",n.append(r),n.classList.add("message-li"),e.append(n)}}function v(){const e=document.querySelectorAll("img.svg-icon");k()(e)}document.body.append(function(){const n=document.createElement("header"),r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),c=document.createElement("h2"),l=document.createElement("p"),s=new Image;r.classList.add("ham");for(let e=0;e<3;e++){const e=document.createElement("div");r.append(e)}return c.classList.add("big-h-text"),l.classList.add("small-h-text"),a.classList.add("header-logo"),i.classList.add("header-img-container"),o.classList.add("header-text-container"),s.classList.add("svg-icon"),s.src=e,c.textContent="To-do",l.textContent="or not to do...",r.addEventListener("click",t),i.append(s),o.append(c,l),a.append(i,o),n.append(r,a),n}(),function(){const e=document.createElement("section");return e.append(function(){const e=document.createElement("div");return e.textContent="+",e.classList.add("add-button"),e.addEventListener("click",p),e}(),function(){const e=document.createElement("aside"),n=document.createElement("div"),t=document.createElement("div"),r=document.createElement("a");n.append(function(){const e=document.createElement("ul"),n=document.createElement("li"),t=document.createElement("li"),r=document.createElement("li"),o=document.createElement("ul"),a=document.createElement("div"),i=new Image;i.src=c;const d=new Image;d.src=l;const A=new Image;A.src=s;const m=document.createElement("h6");return m.innerHTML=(new Date).getUTCDate(),o.classList.add("project-list"),i.classList.add("svg-icon"),d.classList.add("svg-icon"),A.classList.add("svg-icon"),a.classList.add("date-icon"),u(o),n.append(i,"Home"),r.append(A,"Projects",o),a.append(d,m),t.append(a,"Today"),t.addEventListener("click",h),n.addEventListener("click",g),e.classList.add("sidebar-li-container"),e.append(n,t,r),e}());const o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("div");return r.textContent="Vikas K.",t.textContent="Designed and developed by",r.classList.add("website-button"),n.classList.add("sidebar-stuff"),t.classList.add("sidebar-footer"),o.classList.add("darkmode-label"),a.classList.add("darkmode-check"),i.classList.add("darkmode-switch"),r.setAttribute("href","/"),r.setAttribute("target","_blank"),a.setAttribute("type","checkbox"),o.append("Dark Mode",a,i),t.append(r),e.append(n,o,t),a.addEventListener("click",f),e}(),function(){const e=document.createElement("main"),n=document.createElement("h2"),t=document.createElement("ul");return n.textContent="Today",t.classList.add("list-container"),n.classList.add("page-head"),e.append(n,t),B(t),e}()),e}()),v(),function(){localStorage.getItem("theme")&&"dark"===localStorage.getItem("theme")&&(document.querySelector(".darkmode-check").checked=!0,document.documentElement.classList.add("darkmode")),window.matchMedia("(prefers-color-scheme: dark)").matches&&!localStorage.getItem("theme","light")&&(document.documentElement.classList.add("darkmode"),localStorage.setItem("theme","dark"),document.querySelector(".darkmode-check").checked=!0),window.innerWidth;let e=window.innerHeight/100;document.documentElement.style.setProperty("--vh",e),window.addEventListener("resize",(()=>{e=window.innerHeight/100,document.documentElement.style.setProperty("--vh",e)}))}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,